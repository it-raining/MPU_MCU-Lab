
Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080025fc  080025fc  000035fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002620  08002620  00004030  2**0
                  CONTENTS
  4 .ARM          00000000  08002620  08002620  00004030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002620  08002620  00004030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002620  08002620  00003620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002624  08002624  00003624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08002628  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000030  08002658  00004030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002658  000040e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008560  00000000  00000000  00004059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b27  00000000  00000000  0000c5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0000e0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016e15  00000000  00000000  0000eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c152  00000000  00000000  00025915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00082aa6  00000000  00000000  00031a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b450d  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000007a9  00000000  00000000  000b4550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002808  00000000  00000000  000b4cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000b7504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	080025e4 	.word	0x080025e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	080025e4 	.word	0x080025e4

0800014c <fsm_for_input_processing>:
	BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND
};
enum ButtonState button_1 = BUTTON_RELEASED;
enum ButtonState button_2 = BUTTON_RELEASED;
enum ButtonState button_3 = BUTTON_RELEASED;
void fsm_for_input_processing(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (button_1) {
 8000150:	4ba5      	ldr	r3, [pc, #660]	@ (80003e8 <fsm_for_input_processing+0x29c>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b02      	cmp	r3, #2
 8000156:	d050      	beq.n	80001fa <fsm_for_input_processing+0xae>
 8000158:	2b02      	cmp	r3, #2
 800015a:	f300 8093 	bgt.w	8000284 <fsm_for_input_processing+0x138>
 800015e:	2b00      	cmp	r3, #0
 8000160:	d002      	beq.n	8000168 <fsm_for_input_processing+0x1c>
 8000162:	2b01      	cmp	r3, #1
 8000164:	d035      	beq.n	80001d2 <fsm_for_input_processing+0x86>
 8000166:	e08d      	b.n	8000284 <fsm_for_input_processing+0x138>
	case BUTTON_RELEASED:
		if (is_button_pressed(0)) {
 8000168:	2000      	movs	r0, #0
 800016a:	f000 f9bf 	bl	80004ec <is_button_pressed>
 800016e:	4603      	mov	r3, r0
 8000170:	2b00      	cmp	r3, #0
 8000172:	f000 8082 	beq.w	800027a <fsm_for_input_processing+0x12e>
			mode = (mode + 1) % 5;
 8000176:	4b9d      	ldr	r3, [pc, #628]	@ (80003ec <fsm_for_input_processing+0x2a0>)
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	1c5a      	adds	r2, r3, #1
 800017c:	4b9c      	ldr	r3, [pc, #624]	@ (80003f0 <fsm_for_input_processing+0x2a4>)
 800017e:	fb83 1302 	smull	r1, r3, r3, r2
 8000182:	1059      	asrs	r1, r3, #1
 8000184:	17d3      	asrs	r3, r2, #31
 8000186:	1ac9      	subs	r1, r1, r3
 8000188:	460b      	mov	r3, r1
 800018a:	009b      	lsls	r3, r3, #2
 800018c:	440b      	add	r3, r1
 800018e:	1ad1      	subs	r1, r2, r3
 8000190:	b2ca      	uxtb	r2, r1
 8000192:	4b96      	ldr	r3, [pc, #600]	@ (80003ec <fsm_for_input_processing+0x2a0>)
 8000194:	701a      	strb	r2, [r3, #0]
			switch (mode) {
 8000196:	4b95      	ldr	r3, [pc, #596]	@ (80003ec <fsm_for_input_processing+0x2a0>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	2b04      	cmp	r3, #4
 800019c:	d010      	beq.n	80001c0 <fsm_for_input_processing+0x74>
 800019e:	2b04      	cmp	r3, #4
 80001a0:	dc13      	bgt.n	80001ca <fsm_for_input_processing+0x7e>
 80001a2:	2b02      	cmp	r3, #2
 80001a4:	d002      	beq.n	80001ac <fsm_for_input_processing+0x60>
 80001a6:	2b03      	cmp	r3, #3
 80001a8:	d005      	beq.n	80001b6 <fsm_for_input_processing+0x6a>
 80001aa:	e00e      	b.n	80001ca <fsm_for_input_processing+0x7e>
			case MODIFY_RED:
				buffer = red_light;
 80001ac:	4b91      	ldr	r3, [pc, #580]	@ (80003f4 <fsm_for_input_processing+0x2a8>)
 80001ae:	781a      	ldrb	r2, [r3, #0]
 80001b0:	4b91      	ldr	r3, [pc, #580]	@ (80003f8 <fsm_for_input_processing+0x2ac>)
 80001b2:	701a      	strb	r2, [r3, #0]
				break;
 80001b4:	e009      	b.n	80001ca <fsm_for_input_processing+0x7e>
			case MODIFY_AMBER:
				buffer = amber_light;
 80001b6:	4b91      	ldr	r3, [pc, #580]	@ (80003fc <fsm_for_input_processing+0x2b0>)
 80001b8:	781a      	ldrb	r2, [r3, #0]
 80001ba:	4b8f      	ldr	r3, [pc, #572]	@ (80003f8 <fsm_for_input_processing+0x2ac>)
 80001bc:	701a      	strb	r2, [r3, #0]
				break;
 80001be:	e004      	b.n	80001ca <fsm_for_input_processing+0x7e>
			case MODIFY_GREEN:
				buffer = green_light;
 80001c0:	4b8f      	ldr	r3, [pc, #572]	@ (8000400 <fsm_for_input_processing+0x2b4>)
 80001c2:	781a      	ldrb	r2, [r3, #0]
 80001c4:	4b8c      	ldr	r3, [pc, #560]	@ (80003f8 <fsm_for_input_processing+0x2ac>)
 80001c6:	701a      	strb	r2, [r3, #0]
				break;
 80001c8:	bf00      	nop
			default:
			}
			button_1 = BUTTON_PRESSED;
 80001ca:	4b87      	ldr	r3, [pc, #540]	@ (80003e8 <fsm_for_input_processing+0x29c>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	701a      	strb	r2, [r3, #0]
		}
		break;
 80001d0:	e053      	b.n	800027a <fsm_for_input_processing+0x12e>
	case BUTTON_PRESSED:
		if (!is_button_pressed(0)) {
 80001d2:	2000      	movs	r0, #0
 80001d4:	f000 f98a 	bl	80004ec <is_button_pressed>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d103      	bne.n	80001e6 <fsm_for_input_processing+0x9a>
			button_1 = BUTTON_RELEASED;
 80001de:	4b82      	ldr	r3, [pc, #520]	@ (80003e8 <fsm_for_input_processing+0x29c>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	701a      	strb	r2, [r3, #0]
		} else {
			if (is_button_pressed_1s(0)) {
				button_1 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
			}
		}
		break;
 80001e4:	e04b      	b.n	800027e <fsm_for_input_processing+0x132>
			if (is_button_pressed_1s(0)) {
 80001e6:	2000      	movs	r0, #0
 80001e8:	f000 f99a 	bl	8000520 <is_button_pressed_1s>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d045      	beq.n	800027e <fsm_for_input_processing+0x132>
				button_1 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80001f2:	4b7d      	ldr	r3, [pc, #500]	@ (80003e8 <fsm_for_input_processing+0x29c>)
 80001f4:	2202      	movs	r2, #2
 80001f6:	701a      	strb	r2, [r3, #0]
		break;
 80001f8:	e041      	b.n	800027e <fsm_for_input_processing+0x132>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		if (!is_button_pressed(0)) {
 80001fa:	2000      	movs	r0, #0
 80001fc:	f000 f976 	bl	80004ec <is_button_pressed>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d103      	bne.n	800020e <fsm_for_input_processing+0xc2>
			button_1 = BUTTON_RELEASED;
 8000206:	4b78      	ldr	r3, [pc, #480]	@ (80003e8 <fsm_for_input_processing+0x29c>)
 8000208:	2200      	movs	r2, #0
 800020a:	701a      	strb	r2, [r3, #0]
				default:
				}
				setTimer(HOLD, HALF_SEC);
			}
		}
		break;
 800020c:	e039      	b.n	8000282 <fsm_for_input_processing+0x136>
			if (is_avail(HOLD) == 1) {
 800020e:	2003      	movs	r0, #3
 8000210:	f000 fe8e 	bl	8000f30 <is_avail>
 8000214:	4603      	mov	r3, r0
 8000216:	2b01      	cmp	r3, #1
 8000218:	d133      	bne.n	8000282 <fsm_for_input_processing+0x136>
				mode = (mode + 1) % 5;
 800021a:	4b74      	ldr	r3, [pc, #464]	@ (80003ec <fsm_for_input_processing+0x2a0>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	1c5a      	adds	r2, r3, #1
 8000220:	4b73      	ldr	r3, [pc, #460]	@ (80003f0 <fsm_for_input_processing+0x2a4>)
 8000222:	fb83 1302 	smull	r1, r3, r3, r2
 8000226:	1059      	asrs	r1, r3, #1
 8000228:	17d3      	asrs	r3, r2, #31
 800022a:	1ac9      	subs	r1, r1, r3
 800022c:	460b      	mov	r3, r1
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	440b      	add	r3, r1
 8000232:	1ad1      	subs	r1, r2, r3
 8000234:	b2ca      	uxtb	r2, r1
 8000236:	4b6d      	ldr	r3, [pc, #436]	@ (80003ec <fsm_for_input_processing+0x2a0>)
 8000238:	701a      	strb	r2, [r3, #0]
				switch (mode) {
 800023a:	4b6c      	ldr	r3, [pc, #432]	@ (80003ec <fsm_for_input_processing+0x2a0>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2b04      	cmp	r3, #4
 8000240:	d010      	beq.n	8000264 <fsm_for_input_processing+0x118>
 8000242:	2b04      	cmp	r3, #4
 8000244:	dc13      	bgt.n	800026e <fsm_for_input_processing+0x122>
 8000246:	2b02      	cmp	r3, #2
 8000248:	d002      	beq.n	8000250 <fsm_for_input_processing+0x104>
 800024a:	2b03      	cmp	r3, #3
 800024c:	d005      	beq.n	800025a <fsm_for_input_processing+0x10e>
 800024e:	e00e      	b.n	800026e <fsm_for_input_processing+0x122>
					buffer = red_light;
 8000250:	4b68      	ldr	r3, [pc, #416]	@ (80003f4 <fsm_for_input_processing+0x2a8>)
 8000252:	781a      	ldrb	r2, [r3, #0]
 8000254:	4b68      	ldr	r3, [pc, #416]	@ (80003f8 <fsm_for_input_processing+0x2ac>)
 8000256:	701a      	strb	r2, [r3, #0]
					break;
 8000258:	e009      	b.n	800026e <fsm_for_input_processing+0x122>
					buffer = amber_light;
 800025a:	4b68      	ldr	r3, [pc, #416]	@ (80003fc <fsm_for_input_processing+0x2b0>)
 800025c:	781a      	ldrb	r2, [r3, #0]
 800025e:	4b66      	ldr	r3, [pc, #408]	@ (80003f8 <fsm_for_input_processing+0x2ac>)
 8000260:	701a      	strb	r2, [r3, #0]
					break;
 8000262:	e004      	b.n	800026e <fsm_for_input_processing+0x122>
					buffer = green_light;
 8000264:	4b66      	ldr	r3, [pc, #408]	@ (8000400 <fsm_for_input_processing+0x2b4>)
 8000266:	781a      	ldrb	r2, [r3, #0]
 8000268:	4b63      	ldr	r3, [pc, #396]	@ (80003f8 <fsm_for_input_processing+0x2ac>)
 800026a:	701a      	strb	r2, [r3, #0]
					break;
 800026c:	bf00      	nop
				setTimer(HOLD, HALF_SEC);
 800026e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000272:	2003      	movs	r0, #3
 8000274:	f000 fe08 	bl	8000e88 <setTimer>
		break;
 8000278:	e003      	b.n	8000282 <fsm_for_input_processing+0x136>
		break;
 800027a:	bf00      	nop
 800027c:	e002      	b.n	8000284 <fsm_for_input_processing+0x138>
		break;
 800027e:	bf00      	nop
 8000280:	e000      	b.n	8000284 <fsm_for_input_processing+0x138>
		break;
 8000282:	bf00      	nop
	}
	switch (button_2) {
 8000284:	4b5f      	ldr	r3, [pc, #380]	@ (8000404 <fsm_for_input_processing+0x2b8>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b02      	cmp	r3, #2
 800028a:	d034      	beq.n	80002f6 <fsm_for_input_processing+0x1aa>
 800028c:	2b02      	cmp	r3, #2
 800028e:	dc5c      	bgt.n	800034a <fsm_for_input_processing+0x1fe>
 8000290:	2b00      	cmp	r3, #0
 8000292:	d002      	beq.n	800029a <fsm_for_input_processing+0x14e>
 8000294:	2b01      	cmp	r3, #1
 8000296:	d01a      	beq.n	80002ce <fsm_for_input_processing+0x182>
 8000298:	e057      	b.n	800034a <fsm_for_input_processing+0x1fe>
	case BUTTON_RELEASED:
		if (is_button_pressed(1)) {
 800029a:	2001      	movs	r0, #1
 800029c:	f000 f926 	bl	80004ec <is_button_pressed>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d04c      	beq.n	8000340 <fsm_for_input_processing+0x1f4>
			buffer = (buffer + 1) % 100;
 80002a6:	4b54      	ldr	r3, [pc, #336]	@ (80003f8 <fsm_for_input_processing+0x2ac>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	3301      	adds	r3, #1
 80002ac:	4a56      	ldr	r2, [pc, #344]	@ (8000408 <fsm_for_input_processing+0x2bc>)
 80002ae:	fb82 1203 	smull	r1, r2, r2, r3
 80002b2:	1151      	asrs	r1, r2, #5
 80002b4:	17da      	asrs	r2, r3, #31
 80002b6:	1a8a      	subs	r2, r1, r2
 80002b8:	2164      	movs	r1, #100	@ 0x64
 80002ba:	fb01 f202 	mul.w	r2, r1, r2
 80002be:	1a9a      	subs	r2, r3, r2
 80002c0:	b2d2      	uxtb	r2, r2
 80002c2:	4b4d      	ldr	r3, [pc, #308]	@ (80003f8 <fsm_for_input_processing+0x2ac>)
 80002c4:	701a      	strb	r2, [r3, #0]
			button_2 = BUTTON_PRESSED;
 80002c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000404 <fsm_for_input_processing+0x2b8>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	701a      	strb	r2, [r3, #0]
		}
		break;
 80002cc:	e038      	b.n	8000340 <fsm_for_input_processing+0x1f4>
	case BUTTON_PRESSED:
		if (!is_button_pressed(1)) {
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f90c 	bl	80004ec <is_button_pressed>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d103      	bne.n	80002e2 <fsm_for_input_processing+0x196>
			button_2 = BUTTON_RELEASED;
 80002da:	4b4a      	ldr	r3, [pc, #296]	@ (8000404 <fsm_for_input_processing+0x2b8>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
		} else {
			if (is_button_pressed_1s(1)) {
				button_2 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
			}
		}
		break;
 80002e0:	e030      	b.n	8000344 <fsm_for_input_processing+0x1f8>
			if (is_button_pressed_1s(1)) {
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 f91c 	bl	8000520 <is_button_pressed_1s>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d02a      	beq.n	8000344 <fsm_for_input_processing+0x1f8>
				button_2 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80002ee:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <fsm_for_input_processing+0x2b8>)
 80002f0:	2202      	movs	r2, #2
 80002f2:	701a      	strb	r2, [r3, #0]
		break;
 80002f4:	e026      	b.n	8000344 <fsm_for_input_processing+0x1f8>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		if (!is_button_pressed(1)) {
 80002f6:	2001      	movs	r0, #1
 80002f8:	f000 f8f8 	bl	80004ec <is_button_pressed>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d102      	bne.n	8000308 <fsm_for_input_processing+0x1bc>
			button_2 = BUTTON_RELEASED;
 8000302:	4b40      	ldr	r3, [pc, #256]	@ (8000404 <fsm_for_input_processing+0x2b8>)
 8000304:	2200      	movs	r2, #0
 8000306:	701a      	strb	r2, [r3, #0]
		}
		if (is_avail(HOLD) == 1) {
 8000308:	2003      	movs	r0, #3
 800030a:	f000 fe11 	bl	8000f30 <is_avail>
 800030e:	4603      	mov	r3, r0
 8000310:	2b01      	cmp	r3, #1
 8000312:	d119      	bne.n	8000348 <fsm_for_input_processing+0x1fc>
			buffer = (buffer + 1) % 100;
 8000314:	4b38      	ldr	r3, [pc, #224]	@ (80003f8 <fsm_for_input_processing+0x2ac>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	3301      	adds	r3, #1
 800031a:	4a3b      	ldr	r2, [pc, #236]	@ (8000408 <fsm_for_input_processing+0x2bc>)
 800031c:	fb82 1203 	smull	r1, r2, r2, r3
 8000320:	1151      	asrs	r1, r2, #5
 8000322:	17da      	asrs	r2, r3, #31
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	2164      	movs	r1, #100	@ 0x64
 8000328:	fb01 f202 	mul.w	r2, r1, r2
 800032c:	1a9a      	subs	r2, r3, r2
 800032e:	b2d2      	uxtb	r2, r2
 8000330:	4b31      	ldr	r3, [pc, #196]	@ (80003f8 <fsm_for_input_processing+0x2ac>)
 8000332:	701a      	strb	r2, [r3, #0]
			setTimer(HOLD, HALF_SEC);
 8000334:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000338:	2003      	movs	r0, #3
 800033a:	f000 fda5 	bl	8000e88 <setTimer>
		}
		break;
 800033e:	e003      	b.n	8000348 <fsm_for_input_processing+0x1fc>
		break;
 8000340:	bf00      	nop
 8000342:	e002      	b.n	800034a <fsm_for_input_processing+0x1fe>
		break;
 8000344:	bf00      	nop
 8000346:	e000      	b.n	800034a <fsm_for_input_processing+0x1fe>
		break;
 8000348:	bf00      	nop
	}
	switch (button_3) {
 800034a:	4b30      	ldr	r3, [pc, #192]	@ (800040c <fsm_for_input_processing+0x2c0>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b02      	cmp	r3, #2
 8000350:	d03e      	beq.n	80003d0 <fsm_for_input_processing+0x284>
 8000352:	2b02      	cmp	r3, #2
 8000354:	dc5f      	bgt.n	8000416 <fsm_for_input_processing+0x2ca>
 8000356:	2b00      	cmp	r3, #0
 8000358:	d002      	beq.n	8000360 <fsm_for_input_processing+0x214>
 800035a:	2b01      	cmp	r3, #1
 800035c:	d024      	beq.n	80003a8 <fsm_for_input_processing+0x25c>
		if (!is_button_pressed(2)) {
			button_3 = BUTTON_RELEASED;
		}
		break;
	}
}
 800035e:	e05a      	b.n	8000416 <fsm_for_input_processing+0x2ca>
		if (is_button_pressed(2)) {
 8000360:	2002      	movs	r0, #2
 8000362:	f000 f8c3 	bl	80004ec <is_button_pressed>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d03b      	beq.n	80003e4 <fsm_for_input_processing+0x298>
			switch (mode) {
 800036c:	4b1f      	ldr	r3, [pc, #124]	@ (80003ec <fsm_for_input_processing+0x2a0>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b04      	cmp	r3, #4
 8000372:	d010      	beq.n	8000396 <fsm_for_input_processing+0x24a>
 8000374:	2b04      	cmp	r3, #4
 8000376:	dc13      	bgt.n	80003a0 <fsm_for_input_processing+0x254>
 8000378:	2b02      	cmp	r3, #2
 800037a:	d002      	beq.n	8000382 <fsm_for_input_processing+0x236>
 800037c:	2b03      	cmp	r3, #3
 800037e:	d005      	beq.n	800038c <fsm_for_input_processing+0x240>
 8000380:	e00e      	b.n	80003a0 <fsm_for_input_processing+0x254>
				red_light = buffer;
 8000382:	4b1d      	ldr	r3, [pc, #116]	@ (80003f8 <fsm_for_input_processing+0x2ac>)
 8000384:	781a      	ldrb	r2, [r3, #0]
 8000386:	4b1b      	ldr	r3, [pc, #108]	@ (80003f4 <fsm_for_input_processing+0x2a8>)
 8000388:	701a      	strb	r2, [r3, #0]
				break;
 800038a:	e009      	b.n	80003a0 <fsm_for_input_processing+0x254>
				amber_light = buffer;
 800038c:	4b1a      	ldr	r3, [pc, #104]	@ (80003f8 <fsm_for_input_processing+0x2ac>)
 800038e:	781a      	ldrb	r2, [r3, #0]
 8000390:	4b1a      	ldr	r3, [pc, #104]	@ (80003fc <fsm_for_input_processing+0x2b0>)
 8000392:	701a      	strb	r2, [r3, #0]
				break;
 8000394:	e004      	b.n	80003a0 <fsm_for_input_processing+0x254>
				green_light = buffer;
 8000396:	4b18      	ldr	r3, [pc, #96]	@ (80003f8 <fsm_for_input_processing+0x2ac>)
 8000398:	781a      	ldrb	r2, [r3, #0]
 800039a:	4b19      	ldr	r3, [pc, #100]	@ (8000400 <fsm_for_input_processing+0x2b4>)
 800039c:	701a      	strb	r2, [r3, #0]
				break;
 800039e:	bf00      	nop
			button_3 = BUTTON_PRESSED;
 80003a0:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <fsm_for_input_processing+0x2c0>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
		break;
 80003a6:	e01d      	b.n	80003e4 <fsm_for_input_processing+0x298>
		if (!is_button_pressed(2)) {
 80003a8:	2002      	movs	r0, #2
 80003aa:	f000 f89f 	bl	80004ec <is_button_pressed>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d103      	bne.n	80003bc <fsm_for_input_processing+0x270>
			button_3 = BUTTON_RELEASED;
 80003b4:	4b15      	ldr	r3, [pc, #84]	@ (800040c <fsm_for_input_processing+0x2c0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
		break;
 80003ba:	e029      	b.n	8000410 <fsm_for_input_processing+0x2c4>
			if (is_button_pressed_1s(2)) {
 80003bc:	2002      	movs	r0, #2
 80003be:	f000 f8af 	bl	8000520 <is_button_pressed_1s>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d023      	beq.n	8000410 <fsm_for_input_processing+0x2c4>
				button_3 = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80003c8:	4b10      	ldr	r3, [pc, #64]	@ (800040c <fsm_for_input_processing+0x2c0>)
 80003ca:	2202      	movs	r2, #2
 80003cc:	701a      	strb	r2, [r3, #0]
		break;
 80003ce:	e01f      	b.n	8000410 <fsm_for_input_processing+0x2c4>
		if (!is_button_pressed(2)) {
 80003d0:	2002      	movs	r0, #2
 80003d2:	f000 f88b 	bl	80004ec <is_button_pressed>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d11b      	bne.n	8000414 <fsm_for_input_processing+0x2c8>
			button_3 = BUTTON_RELEASED;
 80003dc:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <fsm_for_input_processing+0x2c0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
		break;
 80003e2:	e017      	b.n	8000414 <fsm_for_input_processing+0x2c8>
		break;
 80003e4:	bf00      	nop
 80003e6:	e016      	b.n	8000416 <fsm_for_input_processing+0x2ca>
 80003e8:	20000056 	.word	0x20000056
 80003ec:	2000004c 	.word	0x2000004c
 80003f0:	66666667 	.word	0x66666667
 80003f4:	20000000 	.word	0x20000000
 80003f8:	20000054 	.word	0x20000054
 80003fc:	20000001 	.word	0x20000001
 8000400:	20000002 	.word	0x20000002
 8000404:	20000057 	.word	0x20000057
 8000408:	51eb851f 	.word	0x51eb851f
 800040c:	20000058 	.word	0x20000058
		break;
 8000410:	bf00      	nop
 8000412:	e000      	b.n	8000416 <fsm_for_input_processing+0x2ca>
		break;
 8000414:	bf00      	nop
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop

0800041c <button_reading>:
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS] = { 0 };
GPIO_TypeDef *BTN_Port[NO_OF_BUTTONS] = { BTN1_GPIO_Port, BTN2_GPIO_Port,
		BTN3_GPIO_Port };
uint16_t BTN_Pin[NO_OF_BUTTONS] = { BTN1_Pin, BTN2_Pin, BTN3_Pin };

void button_reading(void) {
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 8000422:	2300      	movs	r3, #0
 8000424:	71fb      	strb	r3, [r7, #7]
 8000426:	e04a      	b.n	80004be <button_reading+0xa2>
//		buttonBuffer[i] = GPIO_PIN_SET;
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000428:	79fa      	ldrb	r2, [r7, #7]
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	4928      	ldr	r1, [pc, #160]	@ (80004d0 <button_reading+0xb4>)
 800042e:	5c89      	ldrb	r1, [r1, r2]
 8000430:	4a28      	ldr	r2, [pc, #160]	@ (80004d4 <button_reading+0xb8>)
 8000432:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BTN_Port[i], BTN_Pin[i]);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	4a28      	ldr	r2, [pc, #160]	@ (80004d8 <button_reading+0xbc>)
 8000438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	4927      	ldr	r1, [pc, #156]	@ (80004dc <button_reading+0xc0>)
 8000440:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000444:	79fc      	ldrb	r4, [r7, #7]
 8000446:	4619      	mov	r1, r3
 8000448:	4610      	mov	r0, r2
 800044a:	f001 f89d 	bl	8001588 <HAL_GPIO_ReadPin>
 800044e:	4603      	mov	r3, r0
 8000450:	461a      	mov	r2, r3
 8000452:	4b1f      	ldr	r3, [pc, #124]	@ (80004d0 <button_reading+0xb4>)
 8000454:	551a      	strb	r2, [r3, r4]
		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	4a1d      	ldr	r2, [pc, #116]	@ (80004d0 <button_reading+0xb4>)
 800045a:	5cd2      	ldrb	r2, [r2, r3]
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	491d      	ldr	r1, [pc, #116]	@ (80004d4 <button_reading+0xb8>)
 8000460:	5ccb      	ldrb	r3, [r1, r3]
 8000462:	429a      	cmp	r2, r3
 8000464:	d105      	bne.n	8000472 <button_reading+0x56>
			buttonBuffer[i] = debounceButtonBuffer2[i];
 8000466:	79fa      	ldrb	r2, [r7, #7]
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	491a      	ldr	r1, [pc, #104]	@ (80004d4 <button_reading+0xb8>)
 800046c:	5c89      	ldrb	r1, [r1, r2]
 800046e:	4a1c      	ldr	r2, [pc, #112]	@ (80004e0 <button_reading+0xc4>)
 8000470:	54d1      	strb	r1, [r2, r3]
		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	4a1a      	ldr	r2, [pc, #104]	@ (80004e0 <button_reading+0xc4>)
 8000476:	5cd3      	ldrb	r3, [r2, r3]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d114      	bne.n	80004a6 <button_reading+0x8a>
			// if a button is pressed , we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	4a19      	ldr	r2, [pc, #100]	@ (80004e4 <button_reading+0xc8>)
 8000480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000484:	2b63      	cmp	r3, #99	@ 0x63
 8000486:	d809      	bhi.n	800049c <button_reading+0x80>
				counterForButtonPress1s[i]++;
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	4a16      	ldr	r2, [pc, #88]	@ (80004e4 <button_reading+0xc8>)
 800048c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000490:	3201      	adds	r2, #1
 8000492:	b291      	uxth	r1, r2
 8000494:	4a13      	ldr	r2, [pc, #76]	@ (80004e4 <button_reading+0xc8>)
 8000496:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800049a:	e00d      	b.n	80004b8 <button_reading+0x9c>
			} else {
				flagForButtonPress1s[i] = 1;
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	4a12      	ldr	r2, [pc, #72]	@ (80004e8 <button_reading+0xcc>)
 80004a0:	2101      	movs	r1, #1
 80004a2:	54d1      	strb	r1, [r2, r3]
 80004a4:	e008      	b.n	80004b8 <button_reading+0x9c>
				// todo
			}
		} else {
			counterForButtonPress1s[i] = 0;
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	4a0e      	ldr	r2, [pc, #56]	@ (80004e4 <button_reading+0xc8>)
 80004aa:	2100      	movs	r1, #0
 80004ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	4a0d      	ldr	r2, [pc, #52]	@ (80004e8 <button_reading+0xcc>)
 80004b4:	2100      	movs	r1, #0
 80004b6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	3301      	adds	r3, #1
 80004bc:	71fb      	strb	r3, [r7, #7]
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d9b1      	bls.n	8000428 <button_reading+0xc>
		}
	}
}
 80004c4:	bf00      	nop
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd90      	pop	{r4, r7, pc}
 80004ce:	bf00      	nop
 80004d0:	2000005c 	.word	0x2000005c
 80004d4:	20000060 	.word	0x20000060
 80004d8:	20000008 	.word	0x20000008
 80004dc:	20000014 	.word	0x20000014
 80004e0:	20000004 	.word	0x20000004
 80004e4:	20000068 	.word	0x20000068
 80004e8:	20000064 	.word	0x20000064

080004ec <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index) {
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS)
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d901      	bls.n	8000500 <is_button_pressed+0x14>
		return 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	e007      	b.n	8000510 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	4a06      	ldr	r2, [pc, #24]	@ (800051c <is_button_pressed+0x30>)
 8000504:	5cd3      	ldrb	r3, [r2, r3]
 8000506:	2b00      	cmp	r3, #0
 8000508:	bf0c      	ite	eq
 800050a:	2301      	moveq	r3, #1
 800050c:	2300      	movne	r3, #0
 800050e:	b2db      	uxtb	r3, r3
}
 8000510:	4618      	mov	r0, r3
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000004 	.word	0x20000004

08000520 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index) {
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS)
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d901      	bls.n	8000534 <is_button_pressed_1s+0x14>
		return 0xff;
 8000530:	23ff      	movs	r3, #255	@ 0xff
 8000532:	e007      	b.n	8000544 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	4a06      	ldr	r2, [pc, #24]	@ (8000550 <is_button_pressed_1s+0x30>)
 8000538:	5cd3      	ldrb	r3, [r2, r3]
 800053a:	2b01      	cmp	r3, #1
 800053c:	bf0c      	ite	eq
 800053e:	2301      	moveq	r3, #1
 8000540:	2300      	movne	r3, #0
 8000542:	b2db      	uxtb	r3, r3
}
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000064 	.word	0x20000064

08000554 <display7SEG>:
 *      Author: HP
 */

#include "led_processing.h"

void display7SEG(int num) {
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	SEG_0_GPIO_Port->ODR &= ~ALL_SEG;
 800055c:	4b37      	ldr	r3, [pc, #220]	@ (800063c <display7SEG+0xe8>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	4a36      	ldr	r2, [pc, #216]	@ (800063c <display7SEG+0xe8>)
 8000562:	f423 437e 	bic.w	r3, r3, #65024	@ 0xfe00
 8000566:	60d3      	str	r3, [r2, #12]
	switch (num) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b09      	cmp	r3, #9
 800056c:	d85a      	bhi.n	8000624 <display7SEG+0xd0>
 800056e:	a201      	add	r2, pc, #4	@ (adr r2, 8000574 <display7SEG+0x20>)
 8000570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000574:	0800059d 	.word	0x0800059d
 8000578:	080005ab 	.word	0x080005ab
 800057c:	080005b9 	.word	0x080005b9
 8000580:	080005c7 	.word	0x080005c7
 8000584:	080005d5 	.word	0x080005d5
 8000588:	080005e3 	.word	0x080005e3
 800058c:	080005f1 	.word	0x080005f1
 8000590:	080005ff 	.word	0x080005ff
 8000594:	0800060d 	.word	0x0800060d
 8000598:	08000617 	.word	0x08000617
	case 0:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_0); // 0
 800059c:	4b27      	ldr	r3, [pc, #156]	@ (800063c <display7SEG+0xe8>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	4a26      	ldr	r2, [pc, #152]	@ (800063c <display7SEG+0xe8>)
 80005a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005a6:	60d3      	str	r3, [r2, #12]
		break;
 80005a8:	e043      	b.n	8000632 <display7SEG+0xde>
	case 1:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_1); // 1
 80005aa:	4b24      	ldr	r3, [pc, #144]	@ (800063c <display7SEG+0xe8>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	4a23      	ldr	r2, [pc, #140]	@ (800063c <display7SEG+0xe8>)
 80005b0:	f443 4372 	orr.w	r3, r3, #61952	@ 0xf200
 80005b4:	60d3      	str	r3, [r2, #12]
		break;
 80005b6:	e03c      	b.n	8000632 <display7SEG+0xde>
	case 2:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_2); // 2
 80005b8:	4b20      	ldr	r3, [pc, #128]	@ (800063c <display7SEG+0xe8>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	4a1f      	ldr	r2, [pc, #124]	@ (800063c <display7SEG+0xe8>)
 80005be:	f443 4390 	orr.w	r3, r3, #18432	@ 0x4800
 80005c2:	60d3      	str	r3, [r2, #12]
		break;
 80005c4:	e035      	b.n	8000632 <display7SEG+0xde>
	case 3:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_3); // 3
 80005c6:	4b1d      	ldr	r3, [pc, #116]	@ (800063c <display7SEG+0xe8>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4a1c      	ldr	r2, [pc, #112]	@ (800063c <display7SEG+0xe8>)
 80005cc:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80005d0:	60d3      	str	r3, [r2, #12]
		break;
 80005d2:	e02e      	b.n	8000632 <display7SEG+0xde>
	case 4:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_4); // 4
 80005d4:	4b19      	ldr	r3, [pc, #100]	@ (800063c <display7SEG+0xe8>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	4a18      	ldr	r2, [pc, #96]	@ (800063c <display7SEG+0xe8>)
 80005da:	f443 5348 	orr.w	r3, r3, #12800	@ 0x3200
 80005de:	60d3      	str	r3, [r2, #12]
		break;
 80005e0:	e027      	b.n	8000632 <display7SEG+0xde>
	case 5:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_5); // 5
 80005e2:	4b16      	ldr	r3, [pc, #88]	@ (800063c <display7SEG+0xe8>)
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	4a15      	ldr	r2, [pc, #84]	@ (800063c <display7SEG+0xe8>)
 80005e8:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 80005ec:	60d3      	str	r3, [r2, #12]
		break;
 80005ee:	e020      	b.n	8000632 <display7SEG+0xde>
	case 6:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_6); // 6
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <display7SEG+0xe8>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	4a11      	ldr	r2, [pc, #68]	@ (800063c <display7SEG+0xe8>)
 80005f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005fa:	60d3      	str	r3, [r2, #12]
		break;
 80005fc:	e019      	b.n	8000632 <display7SEG+0xde>
	case 7:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_7); // 7
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <display7SEG+0xe8>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	4a0e      	ldr	r2, [pc, #56]	@ (800063c <display7SEG+0xe8>)
 8000604:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8000608:	60d3      	str	r3, [r2, #12]
		break;
 800060a:	e012      	b.n	8000632 <display7SEG+0xde>
	case 8:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_8); // 8
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <display7SEG+0xe8>)
 800060e:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <display7SEG+0xe8>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	60d3      	str	r3, [r2, #12]
		break;
 8000614:	e00d      	b.n	8000632 <display7SEG+0xde>
	case 9:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG & ~NUM_9); // 9
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <display7SEG+0xe8>)
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	4a08      	ldr	r2, [pc, #32]	@ (800063c <display7SEG+0xe8>)
 800061c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000620:	60d3      	str	r3, [r2, #12]
		break;
 8000622:	e006      	b.n	8000632 <display7SEG+0xde>
	default:
		SEG_0_GPIO_Port->ODR |= (ALL_SEG); // Turn off all segments
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <display7SEG+0xe8>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	4a04      	ldr	r2, [pc, #16]	@ (800063c <display7SEG+0xe8>)
 800062a:	f443 437e 	orr.w	r3, r3, #65024	@ 0xfe00
 800062e:	60d3      	str	r3, [r2, #12]
	}
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	40010800 	.word	0x40010800

08000640 <update_buffer>:

// SCANNING 4 7SEG-LED TO DISPLAY NUMBER //
static uint8_t scanning_idx = 0;
uint16_t EN_Pin[NO_OF_7SEG] = { EN0_Pin, EN1_Pin, EN2_Pin, EN3_Pin };

void update_buffer(uint8_t num_1, uint8_t num_2) {
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	460a      	mov	r2, r1
 800064a:	71fb      	strb	r3, [r7, #7]
 800064c:	4613      	mov	r3, r2
 800064e:	71bb      	strb	r3, [r7, #6]
	led_buffer[0] = num_1 / 10;
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	4a17      	ldr	r2, [pc, #92]	@ (80006b0 <update_buffer+0x70>)
 8000654:	fba2 2303 	umull	r2, r3, r2, r3
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <update_buffer+0x74>)
 800065e:	701a      	strb	r2, [r3, #0]
	led_buffer[1] = num_1 % 10;
 8000660:	79fa      	ldrb	r2, [r7, #7]
 8000662:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <update_buffer+0x70>)
 8000664:	fba3 1302 	umull	r1, r3, r3, r2
 8000668:	08d9      	lsrs	r1, r3, #3
 800066a:	460b      	mov	r3, r1
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	440b      	add	r3, r1
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <update_buffer+0x74>)
 8000678:	705a      	strb	r2, [r3, #1]
	led_buffer[2] = num_2 / 10;
 800067a:	79bb      	ldrb	r3, [r7, #6]
 800067c:	4a0c      	ldr	r2, [pc, #48]	@ (80006b0 <update_buffer+0x70>)
 800067e:	fba2 2303 	umull	r2, r3, r2, r3
 8000682:	08db      	lsrs	r3, r3, #3
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <update_buffer+0x74>)
 8000688:	709a      	strb	r2, [r3, #2]
	led_buffer[3] = num_2 % 10;
 800068a:	79ba      	ldrb	r2, [r7, #6]
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <update_buffer+0x70>)
 800068e:	fba3 1302 	umull	r1, r3, r3, r2
 8000692:	08d9      	lsrs	r1, r3, #3
 8000694:	460b      	mov	r3, r1
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	440b      	add	r3, r1
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <update_buffer+0x74>)
 80006a2:	70da      	strb	r2, [r3, #3]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	cccccccd 	.word	0xcccccccd
 80006b4:	20000050 	.word	0x20000050

080006b8 <scanning_led>:
void scanning_led(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	if (is_avail(SCANNING) == 1) {
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 fc37 	bl	8000f30 <is_avail>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d12b      	bne.n	8000720 <scanning_led+0x68>
		EN0_GPIO_Port->ODR |= (EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin);
 80006c8:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <scanning_led+0x6c>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	4a15      	ldr	r2, [pc, #84]	@ (8000724 <scanning_led+0x6c>)
 80006ce:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80006d2:	60d3      	str	r3, [r2, #12]
		display7SEG(led_buffer[scanning_idx]);
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <scanning_led+0x70>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <scanning_led+0x74>)
 80006dc:	5c9b      	ldrb	r3, [r3, r2]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff38 	bl	8000554 <display7SEG>
		EN0_GPIO_Port->ODR &= ~(EN_Pin[scanning_idx]);
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <scanning_led+0x6c>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000728 <scanning_led+0x70>)
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	4611      	mov	r1, r2
 80006ee:	4a10      	ldr	r2, [pc, #64]	@ (8000730 <scanning_led+0x78>)
 80006f0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80006f4:	43d2      	mvns	r2, r2
 80006f6:	4611      	mov	r1, r2
 80006f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000724 <scanning_led+0x6c>)
 80006fa:	400b      	ands	r3, r1
 80006fc:	60d3      	str	r3, [r2, #12]
		scanning_idx = (scanning_idx + 1) % NO_OF_7SEG;
 80006fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <scanning_led+0x70>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	425a      	negs	r2, r3
 8000706:	f003 0303 	and.w	r3, r3, #3
 800070a:	f002 0203 	and.w	r2, r2, #3
 800070e:	bf58      	it	pl
 8000710:	4253      	negpl	r3, r2
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <scanning_led+0x70>)
 8000716:	701a      	strb	r2, [r3, #0]
		setTimer(SCANNING, (1000 / NO_OF_7SEG) / SCANNING_FREQ);
 8000718:	21fa      	movs	r1, #250	@ 0xfa
 800071a:	2001      	movs	r0, #1
 800071c:	f000 fbb4 	bl	8000e88 <setTimer>
	}
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40010800 	.word	0x40010800
 8000728:	2000006e 	.word	0x2000006e
 800072c:	20000050 	.word	0x20000050
 8000730:	2000001c 	.word	0x2000001c

08000734 <fsm_for_auto>:

// AUTOMATIC RUN DEFINE //
uint8_t count_1, count_2;
void fsm_for_auto(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	update_buffer(count_1, count_2);
 8000738:	4b72      	ldr	r3, [pc, #456]	@ (8000904 <fsm_for_auto+0x1d0>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4a72      	ldr	r2, [pc, #456]	@ (8000908 <fsm_for_auto+0x1d4>)
 800073e:	7812      	ldrb	r2, [r2, #0]
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff7c 	bl	8000640 <update_buffer>
	switch (line_1) {
 8000748:	4b70      	ldr	r3, [pc, #448]	@ (800090c <fsm_for_auto+0x1d8>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b02      	cmp	r3, #2
 800074e:	d03a      	beq.n	80007c6 <fsm_for_auto+0x92>
 8000750:	2b02      	cmp	r3, #2
 8000752:	dc57      	bgt.n	8000804 <fsm_for_auto+0xd0>
 8000754:	2b00      	cmp	r3, #0
 8000756:	d002      	beq.n	800075e <fsm_for_auto+0x2a>
 8000758:	2b01      	cmp	r3, #1
 800075a:	d01a      	beq.n	8000792 <fsm_for_auto+0x5e>
 800075c:	e052      	b.n	8000804 <fsm_for_auto+0xd0>
	case RED:
		LED_RED_1_GPIO_Port->ODR &= ~(LED_RED_1_Pin | LED_RED_3_Pin);
 800075e:	4b6c      	ldr	r3, [pc, #432]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	4a6b      	ldr	r2, [pc, #428]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000764:	f023 0382 	bic.w	r3, r3, #130	@ 0x82
 8000768:	60d3      	str	r3, [r2, #12]
		if (count_1 <= 0) {
 800076a:	4b66      	ldr	r3, [pc, #408]	@ (8000904 <fsm_for_auto+0x1d0>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d143      	bne.n	80007fa <fsm_for_auto+0xc6>
			LED_RED_1_GPIO_Port->ODR |= ALL_LED;
 8000772:	4b67      	ldr	r3, [pc, #412]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	4a66      	ldr	r2, [pc, #408]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000778:	f443 53ff 	orr.w	r3, r3, #8160	@ 0x1fe0
 800077c:	f043 031e 	orr.w	r3, r3, #30
 8000780:	60d3      	str	r3, [r2, #12]
			line_1 = GREEN;
 8000782:	4b62      	ldr	r3, [pc, #392]	@ (800090c <fsm_for_auto+0x1d8>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
			count_1 = green_light;
 8000788:	4b62      	ldr	r3, [pc, #392]	@ (8000914 <fsm_for_auto+0x1e0>)
 800078a:	781a      	ldrb	r2, [r3, #0]
 800078c:	4b5d      	ldr	r3, [pc, #372]	@ (8000904 <fsm_for_auto+0x1d0>)
 800078e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000790:	e033      	b.n	80007fa <fsm_for_auto+0xc6>
	case GREEN:
		LED_GREEN_1_GPIO_Port->ODR &= ~(LED_GREEN_1_Pin | LED_GREEN_3_Pin);
 8000792:	4b5f      	ldr	r3, [pc, #380]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	4a5e      	ldr	r2, [pc, #376]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000798:	f423 7382 	bic.w	r3, r3, #260	@ 0x104
 800079c:	60d3      	str	r3, [r2, #12]

		if (count_1 <= 0) {
 800079e:	4b59      	ldr	r3, [pc, #356]	@ (8000904 <fsm_for_auto+0x1d0>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d12b      	bne.n	80007fe <fsm_for_auto+0xca>
			LED_RED_1_GPIO_Port->ODR |= ALL_LED;
 80007a6:	4b5a      	ldr	r3, [pc, #360]	@ (8000910 <fsm_for_auto+0x1dc>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	4a59      	ldr	r2, [pc, #356]	@ (8000910 <fsm_for_auto+0x1dc>)
 80007ac:	f443 53ff 	orr.w	r3, r3, #8160	@ 0x1fe0
 80007b0:	f043 031e 	orr.w	r3, r3, #30
 80007b4:	60d3      	str	r3, [r2, #12]
			line_1 = AMBER;
 80007b6:	4b55      	ldr	r3, [pc, #340]	@ (800090c <fsm_for_auto+0x1d8>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	701a      	strb	r2, [r3, #0]
			count_1 = amber_light;
 80007bc:	4b56      	ldr	r3, [pc, #344]	@ (8000918 <fsm_for_auto+0x1e4>)
 80007be:	781a      	ldrb	r2, [r3, #0]
 80007c0:	4b50      	ldr	r3, [pc, #320]	@ (8000904 <fsm_for_auto+0x1d0>)
 80007c2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80007c4:	e01b      	b.n	80007fe <fsm_for_auto+0xca>
	case AMBER:
		LED_AMBER_1_GPIO_Port->ODR &= ~(LED_AMBER_1_Pin | LED_AMBER_3_Pin);
 80007c6:	4b52      	ldr	r3, [pc, #328]	@ (8000910 <fsm_for_auto+0x1dc>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	4a51      	ldr	r2, [pc, #324]	@ (8000910 <fsm_for_auto+0x1dc>)
 80007cc:	f423 7302 	bic.w	r3, r3, #520	@ 0x208
 80007d0:	60d3      	str	r3, [r2, #12]
		if (count_1 <= 0) {
 80007d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000904 <fsm_for_auto+0x1d0>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d113      	bne.n	8000802 <fsm_for_auto+0xce>
			LED_RED_1_GPIO_Port->ODR |= ALL_LED;
 80007da:	4b4d      	ldr	r3, [pc, #308]	@ (8000910 <fsm_for_auto+0x1dc>)
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	4a4c      	ldr	r2, [pc, #304]	@ (8000910 <fsm_for_auto+0x1dc>)
 80007e0:	f443 53ff 	orr.w	r3, r3, #8160	@ 0x1fe0
 80007e4:	f043 031e 	orr.w	r3, r3, #30
 80007e8:	60d3      	str	r3, [r2, #12]
			line_1 = RED;
 80007ea:	4b48      	ldr	r3, [pc, #288]	@ (800090c <fsm_for_auto+0x1d8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
			count_1 = red_light;
 80007f0:	4b4a      	ldr	r3, [pc, #296]	@ (800091c <fsm_for_auto+0x1e8>)
 80007f2:	781a      	ldrb	r2, [r3, #0]
 80007f4:	4b43      	ldr	r3, [pc, #268]	@ (8000904 <fsm_for_auto+0x1d0>)
 80007f6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80007f8:	e003      	b.n	8000802 <fsm_for_auto+0xce>
		break;
 80007fa:	bf00      	nop
 80007fc:	e002      	b.n	8000804 <fsm_for_auto+0xd0>
		break;
 80007fe:	bf00      	nop
 8000800:	e000      	b.n	8000804 <fsm_for_auto+0xd0>
		break;
 8000802:	bf00      	nop
	}

	switch (line_2) {
 8000804:	4b46      	ldr	r3, [pc, #280]	@ (8000920 <fsm_for_auto+0x1ec>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b02      	cmp	r3, #2
 800080a:	d03a      	beq.n	8000882 <fsm_for_auto+0x14e>
 800080c:	2b02      	cmp	r3, #2
 800080e:	dc57      	bgt.n	80008c0 <fsm_for_auto+0x18c>
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <fsm_for_auto+0xe6>
 8000814:	2b01      	cmp	r3, #1
 8000816:	d01a      	beq.n	800084e <fsm_for_auto+0x11a>
 8000818:	e052      	b.n	80008c0 <fsm_for_auto+0x18c>
	case RED:
		LED_RED_2_GPIO_Port->ODR &= ~(LED_RED_2_Pin | LED_RED_4_Pin);
 800081a:	4b3d      	ldr	r3, [pc, #244]	@ (8000910 <fsm_for_auto+0x1dc>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	4a3c      	ldr	r2, [pc, #240]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000820:	f423 6382 	bic.w	r3, r3, #1040	@ 0x410
 8000824:	60d3      	str	r3, [r2, #12]
		if (count_2 <= 0) {
 8000826:	4b38      	ldr	r3, [pc, #224]	@ (8000908 <fsm_for_auto+0x1d4>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d143      	bne.n	80008b6 <fsm_for_auto+0x182>
			LED_RED_2_GPIO_Port->ODR |= ALL_LED;
 800082e:	4b38      	ldr	r3, [pc, #224]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	4a37      	ldr	r2, [pc, #220]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000834:	f443 53ff 	orr.w	r3, r3, #8160	@ 0x1fe0
 8000838:	f043 031e 	orr.w	r3, r3, #30
 800083c:	60d3      	str	r3, [r2, #12]
			line_2 = GREEN;
 800083e:	4b38      	ldr	r3, [pc, #224]	@ (8000920 <fsm_for_auto+0x1ec>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
			count_2 = green_light;
 8000844:	4b33      	ldr	r3, [pc, #204]	@ (8000914 <fsm_for_auto+0x1e0>)
 8000846:	781a      	ldrb	r2, [r3, #0]
 8000848:	4b2f      	ldr	r3, [pc, #188]	@ (8000908 <fsm_for_auto+0x1d4>)
 800084a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800084c:	e033      	b.n	80008b6 <fsm_for_auto+0x182>
	case GREEN:
		LED_RED_2_GPIO_Port->ODR &= ~(LED_GREEN_2_Pin | LED_GREEN_4_Pin);
 800084e:	4b30      	ldr	r3, [pc, #192]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	4a2f      	ldr	r2, [pc, #188]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000854:	f423 6302 	bic.w	r3, r3, #2080	@ 0x820
 8000858:	60d3      	str	r3, [r2, #12]
		if (count_2 <= 0) {
 800085a:	4b2b      	ldr	r3, [pc, #172]	@ (8000908 <fsm_for_auto+0x1d4>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d12b      	bne.n	80008ba <fsm_for_auto+0x186>
			LED_RED_2_GPIO_Port->ODR |= ALL_LED;
 8000862:	4b2b      	ldr	r3, [pc, #172]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000864:	68db      	ldr	r3, [r3, #12]
 8000866:	4a2a      	ldr	r2, [pc, #168]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000868:	f443 53ff 	orr.w	r3, r3, #8160	@ 0x1fe0
 800086c:	f043 031e 	orr.w	r3, r3, #30
 8000870:	60d3      	str	r3, [r2, #12]
			line_2 = AMBER;
 8000872:	4b2b      	ldr	r3, [pc, #172]	@ (8000920 <fsm_for_auto+0x1ec>)
 8000874:	2202      	movs	r2, #2
 8000876:	701a      	strb	r2, [r3, #0]
			count_2 = amber_light;
 8000878:	4b27      	ldr	r3, [pc, #156]	@ (8000918 <fsm_for_auto+0x1e4>)
 800087a:	781a      	ldrb	r2, [r3, #0]
 800087c:	4b22      	ldr	r3, [pc, #136]	@ (8000908 <fsm_for_auto+0x1d4>)
 800087e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000880:	e01b      	b.n	80008ba <fsm_for_auto+0x186>
	case AMBER:
		LED_RED_2_GPIO_Port->ODR &= ~(LED_AMBER_2_Pin | LED_AMBER_4_Pin);
 8000882:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	4a22      	ldr	r2, [pc, #136]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000888:	f423 5382 	bic.w	r3, r3, #4160	@ 0x1040
 800088c:	60d3      	str	r3, [r2, #12]
		if (count_2 <= 0) {
 800088e:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <fsm_for_auto+0x1d4>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d113      	bne.n	80008be <fsm_for_auto+0x18a>
			LED_RED_2_GPIO_Port->ODR |= ALL_LED;
 8000896:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <fsm_for_auto+0x1dc>)
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	4a1d      	ldr	r2, [pc, #116]	@ (8000910 <fsm_for_auto+0x1dc>)
 800089c:	f443 53ff 	orr.w	r3, r3, #8160	@ 0x1fe0
 80008a0:	f043 031e 	orr.w	r3, r3, #30
 80008a4:	60d3      	str	r3, [r2, #12]
			line_2 = RED;
 80008a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <fsm_for_auto+0x1ec>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
			count_2 = red_light;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <fsm_for_auto+0x1e8>)
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <fsm_for_auto+0x1d4>)
 80008b2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80008b4:	e003      	b.n	80008be <fsm_for_auto+0x18a>
		break;
 80008b6:	bf00      	nop
 80008b8:	e002      	b.n	80008c0 <fsm_for_auto+0x18c>
		break;
 80008ba:	bf00      	nop
 80008bc:	e000      	b.n	80008c0 <fsm_for_auto+0x18c>
		break;
 80008be:	bf00      	nop
	}
	if (is_avail(COUNTDOWN) == 1) {
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 fb35 	bl	8000f30 <is_avail>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d118      	bne.n	80008fe <fsm_for_auto+0x1ca>
		if (count_1 > 0)
 80008cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <fsm_for_auto+0x1d0>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d005      	beq.n	80008e0 <fsm_for_auto+0x1ac>
			count_1 = count_1 - 1;
 80008d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <fsm_for_auto+0x1d0>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	3b01      	subs	r3, #1
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <fsm_for_auto+0x1d0>)
 80008de:	701a      	strb	r2, [r3, #0]
		if (count_2 > 0)
 80008e0:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <fsm_for_auto+0x1d4>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d005      	beq.n	80008f4 <fsm_for_auto+0x1c0>
			count_2 = count_2 - 1;
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <fsm_for_auto+0x1d4>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <fsm_for_auto+0x1d4>)
 80008f2:	701a      	strb	r2, [r3, #0]
		setTimer(COUNTDOWN, ONE_SEC);
 80008f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 fac5 	bl	8000e88 <setTimer>
	}
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000006f 	.word	0x2000006f
 8000908:	20000070 	.word	0x20000070
 800090c:	20000055 	.word	0x20000055
 8000910:	40010c00 	.word	0x40010c00
 8000914:	20000002 	.word	0x20000002
 8000918:	20000001 	.word	0x20000001
 800091c:	20000000 	.word	0x20000000
 8000920:	20000003 	.word	0x20000003

08000924 <modify_red>:
void modify_red(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	update_buffer(MODIFY_RED, buffer);
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <modify_red+0x4c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff fe86 	bl	8000640 <update_buffer>
	if (is_avail(BLINKY) == 1) {
 8000934:	2002      	movs	r0, #2
 8000936:	f000 fafb 	bl	8000f30 <is_avail>
 800093a:	4603      	mov	r3, r0
 800093c:	2b01      	cmp	r3, #1
 800093e:	d115      	bne.n	800096c <modify_red+0x48>
		HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8000940:	2102      	movs	r1, #2
 8000942:	480c      	ldr	r0, [pc, #48]	@ (8000974 <modify_red+0x50>)
 8000944:	f000 fe4f 	bl	80015e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 8000948:	2110      	movs	r1, #16
 800094a:	480a      	ldr	r0, [pc, #40]	@ (8000974 <modify_red+0x50>)
 800094c:	f000 fe4b 	bl	80015e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin);
 8000950:	2180      	movs	r1, #128	@ 0x80
 8000952:	4808      	ldr	r0, [pc, #32]	@ (8000974 <modify_red+0x50>)
 8000954:	f000 fe47 	bl	80015e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin);
 8000958:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <modify_red+0x50>)
 800095e:	f000 fe42 	bl	80015e6 <HAL_GPIO_TogglePin>
		setTimer(BLINKY, ONE_SEC);
 8000962:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000966:	2002      	movs	r0, #2
 8000968:	f000 fa8e 	bl	8000e88 <setTimer>
	}
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000054 	.word	0x20000054
 8000974:	40010c00 	.word	0x40010c00

08000978 <modify_amber>:
void modify_amber(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	update_buffer(MODIFY_AMBER, buffer);
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <modify_amber+0x50>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	2003      	movs	r0, #3
 8000984:	f7ff fe5c 	bl	8000640 <update_buffer>
	if (is_avail(BLINKY) == 1) {
 8000988:	2002      	movs	r0, #2
 800098a:	f000 fad1 	bl	8000f30 <is_avail>
 800098e:	4603      	mov	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	d116      	bne.n	80009c2 <modify_amber+0x4a>
		HAL_GPIO_TogglePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin);
 8000994:	2108      	movs	r1, #8
 8000996:	480d      	ldr	r0, [pc, #52]	@ (80009cc <modify_amber+0x54>)
 8000998:	f000 fe25 	bl	80015e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin);
 800099c:	2140      	movs	r1, #64	@ 0x40
 800099e:	480b      	ldr	r0, [pc, #44]	@ (80009cc <modify_amber+0x54>)
 80009a0:	f000 fe21 	bl	80015e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_AMBER_3_GPIO_Port, LED_AMBER_3_Pin);
 80009a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009a8:	4808      	ldr	r0, [pc, #32]	@ (80009cc <modify_amber+0x54>)
 80009aa:	f000 fe1c 	bl	80015e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_AMBER_4_GPIO_Port, LED_AMBER_4_Pin);
 80009ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b2:	4806      	ldr	r0, [pc, #24]	@ (80009cc <modify_amber+0x54>)
 80009b4:	f000 fe17 	bl	80015e6 <HAL_GPIO_TogglePin>
		setTimer(BLINKY, ONE_SEC);
 80009b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009bc:	2002      	movs	r0, #2
 80009be:	f000 fa63 	bl	8000e88 <setTimer>
	}
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000054 	.word	0x20000054
 80009cc:	40010c00 	.word	0x40010c00

080009d0 <modify_green>:
void modify_green(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	update_buffer(MODIFY_GREEN, buffer);
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <modify_green+0x50>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	2004      	movs	r0, #4
 80009dc:	f7ff fe30 	bl	8000640 <update_buffer>
	if (is_avail(BLINKY) == 1) {
 80009e0:	2002      	movs	r0, #2
 80009e2:	f000 faa5 	bl	8000f30 <is_avail>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d116      	bne.n	8000a1a <modify_green+0x4a>
		HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 80009ec:	2104      	movs	r1, #4
 80009ee:	480d      	ldr	r0, [pc, #52]	@ (8000a24 <modify_green+0x54>)
 80009f0:	f000 fdf9 	bl	80015e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 80009f4:	2120      	movs	r1, #32
 80009f6:	480b      	ldr	r0, [pc, #44]	@ (8000a24 <modify_green+0x54>)
 80009f8:	f000 fdf5 	bl	80015e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin);
 80009fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a00:	4808      	ldr	r0, [pc, #32]	@ (8000a24 <modify_green+0x54>)
 8000a02:	f000 fdf0 	bl	80015e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin);
 8000a06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a0a:	4806      	ldr	r0, [pc, #24]	@ (8000a24 <modify_green+0x54>)
 8000a0c:	f000 fdeb 	bl	80015e6 <HAL_GPIO_TogglePin>
		setTimer(BLINKY, ONE_SEC);
 8000a10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a14:	2002      	movs	r0, #2
 8000a16:	f000 fa37 	bl	8000e88 <setTimer>
	}
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000054 	.word	0x20000054
 8000a24:	40010c00 	.word	0x40010c00

08000a28 <fsm_for_traffic_light>:
void fsm_for_traffic_light(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	switch (mode) {
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000aec <fsm_for_traffic_light+0xc4>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d845      	bhi.n	8000ac0 <fsm_for_traffic_light+0x98>
 8000a34:	a201      	add	r2, pc, #4	@ (adr r2, 8000a3c <fsm_for_traffic_light+0x14>)
 8000a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3a:	bf00      	nop
 8000a3c:	08000a51 	.word	0x08000a51
 8000a40:	08000aa9 	.word	0x08000aa9
 8000a44:	08000aaf 	.word	0x08000aaf
 8000a48:	08000ab5 	.word	0x08000ab5
 8000a4c:	08000abb 	.word	0x08000abb
	case INIT:
		setTimer(COUNTDOWN, 97);
 8000a50:	2161      	movs	r1, #97	@ 0x61
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 fa18 	bl	8000e88 <setTimer>
		setTimer(SCANNING, 253);
 8000a58:	21fd      	movs	r1, #253	@ 0xfd
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 fa14 	bl	8000e88 <setTimer>
		setTimer(BLINKY, 1077);
 8000a60:	f240 4135 	movw	r1, #1077	@ 0x435
 8000a64:	2002      	movs	r0, #2
 8000a66:	f000 fa0f 	bl	8000e88 <setTimer>
		setTimer(HOLD, 497);
 8000a6a:	f240 11f1 	movw	r1, #497	@ 0x1f1
 8000a6e:	2003      	movs	r0, #3
 8000a70:	f000 fa0a 	bl	8000e88 <setTimer>
		if (1) {
			LED_RED_1_GPIO_Port->ODR |= ALL_LED;
 8000a74:	4b1e      	ldr	r3, [pc, #120]	@ (8000af0 <fsm_for_traffic_light+0xc8>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	4a1d      	ldr	r2, [pc, #116]	@ (8000af0 <fsm_for_traffic_light+0xc8>)
 8000a7a:	f443 53ff 	orr.w	r3, r3, #8160	@ 0x1fe0
 8000a7e:	f043 031e 	orr.w	r3, r3, #30
 8000a82:	60d3      	str	r3, [r2, #12]
			count_1 = red_light;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <fsm_for_traffic_light+0xcc>)
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <fsm_for_traffic_light+0xd0>)
 8000a8a:	701a      	strb	r2, [r3, #0]
			count_2 = green_light;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <fsm_for_traffic_light+0xd4>)
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <fsm_for_traffic_light+0xd8>)
 8000a92:	701a      	strb	r2, [r3, #0]
			line_1 = RED, line_2 = GREEN;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <fsm_for_traffic_light+0xdc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <fsm_for_traffic_light+0xe0>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
			mode = AUTO;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <fsm_for_traffic_light+0xc4>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000aa6:	e00e      	b.n	8000ac6 <fsm_for_traffic_light+0x9e>
	case AUTO:
		fsm_for_auto();
 8000aa8:	f7ff fe44 	bl	8000734 <fsm_for_auto>
		break;
 8000aac:	e00b      	b.n	8000ac6 <fsm_for_traffic_light+0x9e>
	case MODIFY_RED:
		modify_red();
 8000aae:	f7ff ff39 	bl	8000924 <modify_red>
		break;
 8000ab2:	e008      	b.n	8000ac6 <fsm_for_traffic_light+0x9e>
	case MODIFY_AMBER:
		modify_amber();
 8000ab4:	f7ff ff60 	bl	8000978 <modify_amber>
		break;
 8000ab8:	e005      	b.n	8000ac6 <fsm_for_traffic_light+0x9e>
	case MODIFY_GREEN:
		modify_green();
 8000aba:	f7ff ff89 	bl	80009d0 <modify_green>
		break;
 8000abe:	e002      	b.n	8000ac6 <fsm_for_traffic_light+0x9e>
	default:
		mode = INIT;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <fsm_for_traffic_light+0xc4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
	}
	scanning_led();
 8000ac6:	f7ff fdf7 	bl	80006b8 <scanning_led>
	if (is_button_pressed(0))
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff fd0e 	bl	80004ec <is_button_pressed>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <fsm_for_traffic_light+0xbe>
		LED_RED_1_GPIO_Port->ODR |= ALL_LED;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <fsm_for_traffic_light+0xc8>)
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	4a05      	ldr	r2, [pc, #20]	@ (8000af0 <fsm_for_traffic_light+0xc8>)
 8000adc:	f443 53ff 	orr.w	r3, r3, #8160	@ 0x1fe0
 8000ae0:	f043 031e 	orr.w	r3, r3, #30
 8000ae4:	60d3      	str	r3, [r2, #12]
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000004c 	.word	0x2000004c
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	20000000 	.word	0x20000000
 8000af8:	2000006f 	.word	0x2000006f
 8000afc:	20000002 	.word	0x20000002
 8000b00:	20000070 	.word	0x20000070
 8000b04:	20000055 	.word	0x20000055
 8000b08:	20000003 	.word	0x20000003

08000b0c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b1c:	d103      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000b1e:	f7ff fc7d 	bl	800041c <button_reading>
		timerRun();
 8000b22:	f000 f9d1 	bl	8000ec8 <timerRun>
	}
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b34:	f000 fa3c 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b38:	f000 f82a 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f000 f8b0 	bl	8000ca0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b40:	f000 f862 	bl	8000c08 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000b44:	4810      	ldr	r0, [pc, #64]	@ (8000b88 <main+0x58>)
 8000b46:	f001 f995 	bl	8001e74 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(LED_PINK_GPIO_Port, LED_PINK_Pin, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b50:	480e      	ldr	r0, [pc, #56]	@ (8000b8c <main+0x5c>)
 8000b52:	f000 fd30 	bl	80015b6 <HAL_GPIO_WritePin>
	while (1) {
		if (is_button_pressed(0) == 1)
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff fcc8 	bl	80004ec <is_button_pressed>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d106      	bne.n	8000b70 <main+0x40>
			HAL_GPIO_WritePin(LED_PINK_GPIO_Port, LED_PINK_Pin, 1);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b68:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <main+0x5c>)
 8000b6a:	f000 fd24 	bl	80015b6 <HAL_GPIO_WritePin>
 8000b6e:	e005      	b.n	8000b7c <main+0x4c>
		else
			HAL_GPIO_WritePin(LED_PINK_GPIO_Port, LED_PINK_Pin, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <main+0x5c>)
 8000b78:	f000 fd1d 	bl	80015b6 <HAL_GPIO_WritePin>
		fsm_for_traffic_light();
 8000b7c:	f7ff ff54 	bl	8000a28 <fsm_for_traffic_light>
		fsm_for_input_processing();
 8000b80:	f7ff fae4 	bl	800014c <fsm_for_input_processing>
		if (is_button_pressed(0) == 1)
 8000b84:	e7e7      	b.n	8000b56 <main+0x26>
 8000b86:	bf00      	nop
 8000b88:	20000074 	.word	0x20000074
 8000b8c:	40010800 	.word	0x40010800

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b090      	sub	sp, #64	@ 0x40
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	2228      	movs	r2, #40	@ 0x28
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fcf4 	bl	800258c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	f107 0318 	add.w	r3, r7, #24
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fd26 	bl	8001618 <HAL_RCC_OscConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bd2:	f000 f8c7 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 ff94 	bl	8001b1c <HAL_RCC_ClockConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bfa:	f000 f8b3 	bl	8000d64 <Error_Handler>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3740      	adds	r7, #64	@ 0x40
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	@ (8000c9c <MX_TIM2_Init+0x94>)
 8000c26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <MX_TIM2_Init+0x94>)
 8000c2e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000c32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <MX_TIM2_Init+0x94>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <MX_TIM2_Init+0x94>)
 8000c3c:	2209      	movs	r2, #9
 8000c3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <MX_TIM2_Init+0x94>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <MX_TIM2_Init+0x94>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c4c:	4813      	ldr	r0, [pc, #76]	@ (8000c9c <MX_TIM2_Init+0x94>)
 8000c4e:	f001 f8c1 	bl	8001dd4 <HAL_TIM_Base_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c58:	f000 f884 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	4619      	mov	r1, r3
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <MX_TIM2_Init+0x94>)
 8000c6a:	f001 fa3f 	bl	80020ec <HAL_TIM_ConfigClockSource>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c74:	f000 f876 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <MX_TIM2_Init+0x94>)
 8000c86:	f001 fc17 	bl	80024b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c90:	f000 f868 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000074 	.word	0x20000074

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <MX_GPIO_Init+0xb8>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a27      	ldr	r2, [pc, #156]	@ (8000d58 <MX_GPIO_Init+0xb8>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b25      	ldr	r3, [pc, #148]	@ (8000d58 <MX_GPIO_Init+0xb8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ccc:	4b22      	ldr	r3, [pc, #136]	@ (8000d58 <MX_GPIO_Init+0xb8>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a21      	ldr	r2, [pc, #132]	@ (8000d58 <MX_GPIO_Init+0xb8>)
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d58 <MX_GPIO_Init+0xb8>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 8000cea:	481c      	ldr	r0, [pc, #112]	@ (8000d5c <MX_GPIO_Init+0xbc>)
 8000cec:	f000 fc63 	bl	80015b6 <HAL_GPIO_WritePin>
                          |LED_PINK_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin
                          |SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin|LED_GREEN_1_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f641 71fe 	movw	r1, #8190	@ 0x1ffe
 8000cf6:	481a      	ldr	r0, [pc, #104]	@ (8000d60 <MX_GPIO_Init+0xc0>)
 8000cf8:	f000 fc5d 	bl	80015b6 <HAL_GPIO_WritePin>
                          |LED_AMBER_4_Pin|LED_AMBER_1_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin
                          |LED_AMBER_2_Pin|LED_RED_3_Pin|LED_GREEN_3_Pin|LED_AMBER_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8000cfc:	230e      	movs	r3, #14
 8000cfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4813      	ldr	r0, [pc, #76]	@ (8000d5c <MX_GPIO_Init+0xbc>)
 8000d10:	f000 fabe 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED_PINK_Pin SEG_0_Pin SEG_1_Pin SEG_2_Pin
                           SEG_3_Pin SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000d14:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8000d18:	60bb      	str	r3, [r7, #8]
                          |LED_PINK_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin
                          |SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2302      	movs	r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480b      	ldr	r0, [pc, #44]	@ (8000d5c <MX_GPIO_Init+0xbc>)
 8000d2e:	f000 faaf 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_1_Pin LED_GREEN_1_Pin LED_RED_4_Pin LED_GREEN_4_Pin
                           LED_AMBER_4_Pin LED_AMBER_1_Pin LED_RED_2_Pin LED_GREEN_2_Pin
                           LED_AMBER_2_Pin LED_RED_3_Pin LED_GREEN_3_Pin LED_AMBER_3_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_GREEN_1_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
 8000d32:	f641 73fe 	movw	r3, #8190	@ 0x1ffe
 8000d36:	60bb      	str	r3, [r7, #8]
                          |LED_AMBER_4_Pin|LED_AMBER_1_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin
                          |LED_AMBER_2_Pin|LED_RED_3_Pin|LED_GREEN_3_Pin|LED_AMBER_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2302      	movs	r3, #2
 8000d42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_GPIO_Init+0xc0>)
 8000d4c:	f000 faa0 	bl	8001290 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	40010c00 	.word	0x40010c00

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <Error_Handler+0x8>

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <HAL_MspInit+0x5c>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a14      	ldr	r2, [pc, #80]	@ (8000dcc <HAL_MspInit+0x5c>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <HAL_MspInit+0x5c>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <HAL_MspInit+0x5c>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a0e      	ldr	r2, [pc, #56]	@ (8000dcc <HAL_MspInit+0x5c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <HAL_MspInit+0x5c>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <HAL_MspInit+0x60>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <HAL_MspInit+0x60>)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000

08000dd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000de4:	d113      	bne.n	8000e0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <HAL_TIM_Base_MspInit+0x44>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <HAL_TIM_Base_MspInit+0x44>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <HAL_TIM_Base_MspInit+0x44>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	201c      	movs	r0, #28
 8000e04:	f000 fa0d 	bl	8001222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e08:	201c      	movs	r0, #28
 8000e0a:	f000 fa26 	bl	800125a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <NMI_Handler+0x4>

08000e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <MemManage_Handler+0x4>

08000e34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6c:	f000 f8e6 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <TIM2_IRQHandler+0x10>)
 8000e7a:	f001 f847 	bl	8001f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000074 	.word	0x20000074

08000e88 <setTimer>:
 *      Author: HP
 */
#include "swTimer.h"
UserTimer timer[NO_OF_TIMER];

void setTimer(int idx, uint16_t duration) {
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	807b      	strh	r3, [r7, #2]
	timer[idx].counter = duration / TIMER_CYCLE;
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <setTimer+0x38>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	08db      	lsrs	r3, r3, #3
 8000e9e:	b299      	uxth	r1, r3
 8000ea0:	4a08      	ldr	r2, [pc, #32]	@ (8000ec4 <setTimer+0x3c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	805a      	strh	r2, [r3, #2]
	timer[idx].flag = 0;
 8000eac:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <setTimer+0x3c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	cccccccd 	.word	0xcccccccd
 8000ec4:	200000bc 	.word	0x200000bc

08000ec8 <timerRun>:

void timerRun(void) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_TIMER; i++) {
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	e022      	b.n	8000f1a <timerRun+0x52>
		if (timer[i].counter > 0) {
 8000ed4:	4a15      	ldr	r2, [pc, #84]	@ (8000f2c <timerRun+0x64>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	885b      	ldrh	r3, [r3, #2]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d018      	beq.n	8000f14 <timerRun+0x4c>
			timer[i].counter--;
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <timerRun+0x64>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	885b      	ldrh	r3, [r3, #2]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	b299      	uxth	r1, r3
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8000f2c <timerRun+0x64>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	460a      	mov	r2, r1
 8000efa:	805a      	strh	r2, [r3, #2]
			if (timer[i].counter <= 0)
 8000efc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <timerRun+0x64>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	885b      	ldrh	r3, [r3, #2]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d104      	bne.n	8000f14 <timerRun+0x4c>
				timer[i].flag = 1;
 8000f0a:	4a08      	ldr	r2, [pc, #32]	@ (8000f2c <timerRun+0x64>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2101      	movs	r1, #1
 8000f10:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_TIMER; i++) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3301      	adds	r3, #1
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b09      	cmp	r3, #9
 8000f1e:	ddd9      	ble.n	8000ed4 <timerRun+0xc>
		}
	}
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	200000bc 	.word	0x200000bc

08000f30 <is_avail>:

int is_avail(int idx) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	return (timer[idx].flag == 1);
 8000f38:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <is_avail+0x24>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	bf0c      	ite	eq
 8000f44:	2301      	moveq	r3, #1
 8000f46:	2300      	movne	r3, #0
 8000f48:	b2db      	uxtb	r3, r3
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	200000bc 	.word	0x200000bc

08000f58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f64:	f7ff fff8 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480b      	ldr	r0, [pc, #44]	@ (8000f98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f6a:	490c      	ldr	r1, [pc, #48]	@ (8000f9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a09      	ldr	r2, [pc, #36]	@ (8000fa4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f80:	4c09      	ldr	r4, [pc, #36]	@ (8000fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f001 fb05 	bl	800259c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f92:	f7ff fdcd 	bl	8000b30 <main>
  bx lr
 8000f96:	4770      	bx	lr
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000fa0:	08002628 	.word	0x08002628
  ldr r2, =_sbss
 8000fa4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000fa8:	200000e8 	.word	0x200000e8

08000fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC1_2_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <HAL_Init+0x28>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <HAL_Init+0x28>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f923 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	200f      	movs	r0, #15
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fed0 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f93b 	bl	8001276 <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f903 	bl	8001222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000024 	.word	0x20000024
 8001034:	2000002c 	.word	0x2000002c
 8001038:	20000028 	.word	0x20000028

0800103c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_IncTick+0x1c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b05      	ldr	r3, [pc, #20]	@ (800105c <HAL_IncTick+0x20>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a03      	ldr	r2, [pc, #12]	@ (800105c <HAL_IncTick+0x20>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	2000002c 	.word	0x2000002c
 800105c:	200000e4 	.word	0x200000e4

08001060 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b02      	ldr	r3, [pc, #8]	@ (8001070 <HAL_GetTick+0x10>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	200000e4 	.word	0x200000e4

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4906      	ldr	r1, [pc, #24]	@ (800110c <__NVIC_EnableIRQ+0x34>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	@ (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	@ (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	@ 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	@ 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f7ff ff90 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff2d 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff42 	bl	80010bc <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff90 	bl	8001164 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5f 	bl	8001110 <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff35 	bl	80010d8 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffa2 	bl	80011c8 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b08b      	sub	sp, #44	@ 0x2c
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a2:	e161      	b.n	8001568 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012a4:	2201      	movs	r2, #1
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	429a      	cmp	r2, r3
 80012be:	f040 8150 	bne.w	8001562 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	4a97      	ldr	r2, [pc, #604]	@ (8001524 <HAL_GPIO_Init+0x294>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d05e      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012cc:	4a95      	ldr	r2, [pc, #596]	@ (8001524 <HAL_GPIO_Init+0x294>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d875      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 80012d2:	4a95      	ldr	r2, [pc, #596]	@ (8001528 <HAL_GPIO_Init+0x298>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d058      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012d8:	4a93      	ldr	r2, [pc, #588]	@ (8001528 <HAL_GPIO_Init+0x298>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d86f      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 80012de:	4a93      	ldr	r2, [pc, #588]	@ (800152c <HAL_GPIO_Init+0x29c>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d052      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012e4:	4a91      	ldr	r2, [pc, #580]	@ (800152c <HAL_GPIO_Init+0x29c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d869      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 80012ea:	4a91      	ldr	r2, [pc, #580]	@ (8001530 <HAL_GPIO_Init+0x2a0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d04c      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012f0:	4a8f      	ldr	r2, [pc, #572]	@ (8001530 <HAL_GPIO_Init+0x2a0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d863      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 80012f6:	4a8f      	ldr	r2, [pc, #572]	@ (8001534 <HAL_GPIO_Init+0x2a4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d046      	beq.n	800138a <HAL_GPIO_Init+0xfa>
 80012fc:	4a8d      	ldr	r2, [pc, #564]	@ (8001534 <HAL_GPIO_Init+0x2a4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d85d      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 8001302:	2b12      	cmp	r3, #18
 8001304:	d82a      	bhi.n	800135c <HAL_GPIO_Init+0xcc>
 8001306:	2b12      	cmp	r3, #18
 8001308:	d859      	bhi.n	80013be <HAL_GPIO_Init+0x12e>
 800130a:	a201      	add	r2, pc, #4	@ (adr r2, 8001310 <HAL_GPIO_Init+0x80>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	0800138b 	.word	0x0800138b
 8001314:	08001365 	.word	0x08001365
 8001318:	08001377 	.word	0x08001377
 800131c:	080013b9 	.word	0x080013b9
 8001320:	080013bf 	.word	0x080013bf
 8001324:	080013bf 	.word	0x080013bf
 8001328:	080013bf 	.word	0x080013bf
 800132c:	080013bf 	.word	0x080013bf
 8001330:	080013bf 	.word	0x080013bf
 8001334:	080013bf 	.word	0x080013bf
 8001338:	080013bf 	.word	0x080013bf
 800133c:	080013bf 	.word	0x080013bf
 8001340:	080013bf 	.word	0x080013bf
 8001344:	080013bf 	.word	0x080013bf
 8001348:	080013bf 	.word	0x080013bf
 800134c:	080013bf 	.word	0x080013bf
 8001350:	080013bf 	.word	0x080013bf
 8001354:	0800136d 	.word	0x0800136d
 8001358:	08001381 	.word	0x08001381
 800135c:	4a76      	ldr	r2, [pc, #472]	@ (8001538 <HAL_GPIO_Init+0x2a8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001362:	e02c      	b.n	80013be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e029      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	3304      	adds	r3, #4
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	e024      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	3308      	adds	r3, #8
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e01f      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	330c      	adds	r3, #12
 8001386:	623b      	str	r3, [r7, #32]
          break;
 8001388:	e01a      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001392:	2304      	movs	r3, #4
 8001394:	623b      	str	r3, [r7, #32]
          break;
 8001396:	e013      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d105      	bne.n	80013ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a0:	2308      	movs	r3, #8
 80013a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	611a      	str	r2, [r3, #16]
          break;
 80013aa:	e009      	b.n	80013c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ac:	2308      	movs	r3, #8
 80013ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	615a      	str	r2, [r3, #20]
          break;
 80013b6:	e003      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
          break;
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x130>
          break;
 80013be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2bff      	cmp	r3, #255	@ 0xff
 80013c4:	d801      	bhi.n	80013ca <HAL_GPIO_Init+0x13a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	e001      	b.n	80013ce <HAL_GPIO_Init+0x13e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3304      	adds	r3, #4
 80013ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2bff      	cmp	r3, #255	@ 0xff
 80013d4:	d802      	bhi.n	80013dc <HAL_GPIO_Init+0x14c>
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	e002      	b.n	80013e2 <HAL_GPIO_Init+0x152>
 80013dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013de:	3b08      	subs	r3, #8
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	210f      	movs	r1, #15
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	401a      	ands	r2, r3
 80013f4:	6a39      	ldr	r1, [r7, #32]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	431a      	orrs	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 80a9 	beq.w	8001562 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001410:	4b4a      	ldr	r3, [pc, #296]	@ (800153c <HAL_GPIO_Init+0x2ac>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a49      	ldr	r2, [pc, #292]	@ (800153c <HAL_GPIO_Init+0x2ac>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b47      	ldr	r3, [pc, #284]	@ (800153c <HAL_GPIO_Init+0x2ac>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001428:	4a45      	ldr	r2, [pc, #276]	@ (8001540 <HAL_GPIO_Init+0x2b0>)
 800142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001434:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	220f      	movs	r2, #15
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a3d      	ldr	r2, [pc, #244]	@ (8001544 <HAL_GPIO_Init+0x2b4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d00d      	beq.n	8001470 <HAL_GPIO_Init+0x1e0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a3c      	ldr	r2, [pc, #240]	@ (8001548 <HAL_GPIO_Init+0x2b8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d007      	beq.n	800146c <HAL_GPIO_Init+0x1dc>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a3b      	ldr	r2, [pc, #236]	@ (800154c <HAL_GPIO_Init+0x2bc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_GPIO_Init+0x1d8>
 8001464:	2302      	movs	r3, #2
 8001466:	e004      	b.n	8001472 <HAL_GPIO_Init+0x1e2>
 8001468:	2303      	movs	r3, #3
 800146a:	e002      	b.n	8001472 <HAL_GPIO_Init+0x1e2>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <HAL_GPIO_Init+0x1e2>
 8001470:	2300      	movs	r3, #0
 8001472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001474:	f002 0203 	and.w	r2, r2, #3
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	4093      	lsls	r3, r2
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001482:	492f      	ldr	r1, [pc, #188]	@ (8001540 <HAL_GPIO_Init+0x2b0>)
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800149c:	4b2c      	ldr	r3, [pc, #176]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	492b      	ldr	r1, [pc, #172]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	608b      	str	r3, [r1, #8]
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014aa:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4927      	ldr	r1, [pc, #156]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014c4:	4b22      	ldr	r3, [pc, #136]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	4921      	ldr	r1, [pc, #132]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	60cb      	str	r3, [r1, #12]
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	43db      	mvns	r3, r3
 80014da:	491d      	ldr	r1, [pc, #116]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 80014dc:	4013      	ands	r3, r2
 80014de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014ec:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4917      	ldr	r1, [pc, #92]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
 80014f8:	e006      	b.n	8001508 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	43db      	mvns	r3, r3
 8001502:	4913      	ldr	r1, [pc, #76]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 8001504:	4013      	ands	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d01f      	beq.n	8001554 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001514:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	490d      	ldr	r1, [pc, #52]	@ (8001550 <HAL_GPIO_Init+0x2c0>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	600b      	str	r3, [r1, #0]
 8001520:	e01f      	b.n	8001562 <HAL_GPIO_Init+0x2d2>
 8001522:	bf00      	nop
 8001524:	10320000 	.word	0x10320000
 8001528:	10310000 	.word	0x10310000
 800152c:	10220000 	.word	0x10220000
 8001530:	10210000 	.word	0x10210000
 8001534:	10120000 	.word	0x10120000
 8001538:	10110000 	.word	0x10110000
 800153c:	40021000 	.word	0x40021000
 8001540:	40010000 	.word	0x40010000
 8001544:	40010800 	.word	0x40010800
 8001548:	40010c00 	.word	0x40010c00
 800154c:	40011000 	.word	0x40011000
 8001550:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001554:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <HAL_GPIO_Init+0x2f4>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	43db      	mvns	r3, r3
 800155c:	4909      	ldr	r1, [pc, #36]	@ (8001584 <HAL_GPIO_Init+0x2f4>)
 800155e:	4013      	ands	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	3301      	adds	r3, #1
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	f47f ae96 	bne.w	80012a4 <HAL_GPIO_Init+0x14>
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	372c      	adds	r7, #44	@ 0x2c
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	40010400 	.word	0x40010400

08001588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	4013      	ands	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e001      	b.n	80015aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	807b      	strh	r3, [r7, #2]
 80015c2:	4613      	mov	r3, r2
 80015c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c6:	787b      	ldrb	r3, [r7, #1]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015cc:	887a      	ldrh	r2, [r7, #2]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015d2:	e003      	b.n	80015dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	041a      	lsls	r2, r3, #16
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	611a      	str	r2, [r3, #16]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015f8:	887a      	ldrh	r2, [r7, #2]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	041a      	lsls	r2, r3, #16
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43d9      	mvns	r1, r3
 8001604:	887b      	ldrh	r3, [r7, #2]
 8001606:	400b      	ands	r3, r1
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	611a      	str	r2, [r3, #16]
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e272      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8087 	beq.w	8001746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001638:	4b92      	ldr	r3, [pc, #584]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b04      	cmp	r3, #4
 8001642:	d00c      	beq.n	800165e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001644:	4b8f      	ldr	r3, [pc, #572]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b08      	cmp	r3, #8
 800164e:	d112      	bne.n	8001676 <HAL_RCC_OscConfig+0x5e>
 8001650:	4b8c      	ldr	r3, [pc, #560]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800165c:	d10b      	bne.n	8001676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165e:	4b89      	ldr	r3, [pc, #548]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d06c      	beq.n	8001744 <HAL_RCC_OscConfig+0x12c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d168      	bne.n	8001744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e24c      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x76>
 8001680:	4b80      	ldr	r3, [pc, #512]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a7f      	ldr	r2, [pc, #508]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e02e      	b.n	80016ec <HAL_RCC_OscConfig+0xd4>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x98>
 8001696:	4b7b      	ldr	r3, [pc, #492]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a7a      	ldr	r2, [pc, #488]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 800169c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b78      	ldr	r3, [pc, #480]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a77      	ldr	r2, [pc, #476]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e01d      	b.n	80016ec <HAL_RCC_OscConfig+0xd4>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0xbc>
 80016ba:	4b72      	ldr	r3, [pc, #456]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a71      	ldr	r2, [pc, #452]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e00b      	b.n	80016ec <HAL_RCC_OscConfig+0xd4>
 80016d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b68      	ldr	r3, [pc, #416]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a67      	ldr	r2, [pc, #412]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d013      	beq.n	800171c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fcb4 	bl	8001060 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff fcb0 	bl	8001060 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	@ 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e200      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	4b5d      	ldr	r3, [pc, #372]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0xe4>
 800171a:	e014      	b.n	8001746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fca0 	bl	8001060 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff fc9c 	bl	8001060 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	@ 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e1ec      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001736:	4b53      	ldr	r3, [pc, #332]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x10c>
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d063      	beq.n	800181a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001752:	4b4c      	ldr	r3, [pc, #304]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00b      	beq.n	8001776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800175e:	4b49      	ldr	r3, [pc, #292]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b08      	cmp	r3, #8
 8001768:	d11c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x18c>
 800176a:	4b46      	ldr	r3, [pc, #280]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d116      	bne.n	80017a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001776:	4b43      	ldr	r3, [pc, #268]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_RCC_OscConfig+0x176>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d001      	beq.n	800178e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e1c0      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	4b3d      	ldr	r3, [pc, #244]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4939      	ldr	r1, [pc, #228]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	e03a      	b.n	800181a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ac:	4b36      	ldr	r3, [pc, #216]	@ (8001888 <HAL_RCC_OscConfig+0x270>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fc55 	bl	8001060 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff fc51 	bl	8001060 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e1a1      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4927      	ldr	r1, [pc, #156]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
 80017ec:	e015      	b.n	800181a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ee:	4b26      	ldr	r3, [pc, #152]	@ (8001888 <HAL_RCC_OscConfig+0x270>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fc34 	bl	8001060 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fc:	f7ff fc30 	bl	8001060 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e180      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d03a      	beq.n	800189c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d019      	beq.n	8001862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182e:	4b17      	ldr	r3, [pc, #92]	@ (800188c <HAL_RCC_OscConfig+0x274>)
 8001830:	2201      	movs	r2, #1
 8001832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff fc14 	bl	8001060 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff fc10 	bl	8001060 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e160      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184e:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <HAL_RCC_OscConfig+0x26c>)
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800185a:	2001      	movs	r0, #1
 800185c:	f000 fa9c 	bl	8001d98 <RCC_Delay>
 8001860:	e01c      	b.n	800189c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001862:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <HAL_RCC_OscConfig+0x274>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001868:	f7ff fbfa 	bl	8001060 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186e:	e00f      	b.n	8001890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001870:	f7ff fbf6 	bl	8001060 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d908      	bls.n	8001890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e146      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
 8001888:	42420000 	.word	0x42420000
 800188c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001890:	4b92      	ldr	r3, [pc, #584]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e9      	bne.n	8001870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80a6 	beq.w	80019f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ae:	4b8b      	ldr	r3, [pc, #556]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10d      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b88      	ldr	r3, [pc, #544]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a87      	ldr	r2, [pc, #540]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b85      	ldr	r3, [pc, #532]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d2:	2301      	movs	r3, #1
 80018d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	4b82      	ldr	r3, [pc, #520]	@ (8001ae0 <HAL_RCC_OscConfig+0x4c8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d118      	bne.n	8001914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae0 <HAL_RCC_OscConfig+0x4c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ae0 <HAL_RCC_OscConfig+0x4c8>)
 80018e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ee:	f7ff fbb7 	bl	8001060 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f6:	f7ff fbb3 	bl	8001060 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b64      	cmp	r3, #100	@ 0x64
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e103      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	4b75      	ldr	r3, [pc, #468]	@ (8001ae0 <HAL_RCC_OscConfig+0x4c8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x312>
 800191c:	4b6f      	ldr	r3, [pc, #444]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4a6e      	ldr	r2, [pc, #440]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6213      	str	r3, [r2, #32]
 8001928:	e02d      	b.n	8001986 <HAL_RCC_OscConfig+0x36e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x334>
 8001932:	4b6a      	ldr	r3, [pc, #424]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a69      	ldr	r2, [pc, #420]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6213      	str	r3, [r2, #32]
 800193e:	4b67      	ldr	r3, [pc, #412]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a66      	ldr	r2, [pc, #408]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	e01c      	b.n	8001986 <HAL_RCC_OscConfig+0x36e>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b05      	cmp	r3, #5
 8001952:	d10c      	bne.n	800196e <HAL_RCC_OscConfig+0x356>
 8001954:	4b61      	ldr	r3, [pc, #388]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4a60      	ldr	r2, [pc, #384]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	6213      	str	r3, [r2, #32]
 8001960:	4b5e      	ldr	r3, [pc, #376]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a5d      	ldr	r2, [pc, #372]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6213      	str	r3, [r2, #32]
 800196c:	e00b      	b.n	8001986 <HAL_RCC_OscConfig+0x36e>
 800196e:	4b5b      	ldr	r3, [pc, #364]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4a5a      	ldr	r2, [pc, #360]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	6213      	str	r3, [r2, #32]
 800197a:	4b58      	ldr	r3, [pc, #352]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4a57      	ldr	r2, [pc, #348]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001980:	f023 0304 	bic.w	r3, r3, #4
 8001984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d015      	beq.n	80019ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198e:	f7ff fb67 	bl	8001060 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001994:	e00a      	b.n	80019ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001996:	f7ff fb63 	bl	8001060 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e0b1      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ac:	4b4b      	ldr	r3, [pc, #300]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ee      	beq.n	8001996 <HAL_RCC_OscConfig+0x37e>
 80019b8:	e014      	b.n	80019e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fb51 	bl	8001060 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff fb4d 	bl	8001060 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e09b      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d8:	4b40      	ldr	r3, [pc, #256]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1ee      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d105      	bne.n	80019f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ea:	4b3c      	ldr	r3, [pc, #240]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a3b      	ldr	r2, [pc, #236]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8087 	beq.w	8001b0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a00:	4b36      	ldr	r3, [pc, #216]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d061      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d146      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a14:	4b33      	ldr	r3, [pc, #204]	@ (8001ae4 <HAL_RCC_OscConfig+0x4cc>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fb21 	bl	8001060 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff fb1d 	bl	8001060 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e06d      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a48:	d108      	bne.n	8001a5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a4a:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4921      	ldr	r1, [pc, #132]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a19      	ldr	r1, [r3, #32]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	491b      	ldr	r1, [pc, #108]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae4 <HAL_RCC_OscConfig+0x4cc>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff faf1 	bl	8001060 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff faed 	bl	8001060 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e03d      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a94:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x46a>
 8001aa0:	e035      	b.n	8001b0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa2:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <HAL_RCC_OscConfig+0x4cc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fada 	bl	8001060 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff fad6 	bl	8001060 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e026      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x498>
 8001ace:	e01e      	b.n	8001b0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e019      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40007000 	.word	0x40007000
 8001ae4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0d0      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b30:	4b6a      	ldr	r3, [pc, #424]	@ (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d910      	bls.n	8001b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b67      	ldr	r3, [pc, #412]	@ (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 0207 	bic.w	r2, r3, #7
 8001b46:	4965      	ldr	r1, [pc, #404]	@ (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b63      	ldr	r3, [pc, #396]	@ (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0b8      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b78:	4b59      	ldr	r3, [pc, #356]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4a58      	ldr	r2, [pc, #352]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b90:	4b53      	ldr	r3, [pc, #332]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	4a52      	ldr	r2, [pc, #328]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9c:	4b50      	ldr	r3, [pc, #320]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	494d      	ldr	r1, [pc, #308]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d040      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	4b47      	ldr	r3, [pc, #284]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d115      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e07f      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bda:	4b41      	ldr	r3, [pc, #260]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e073      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bea:	4b3d      	ldr	r3, [pc, #244]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e06b      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfa:	4b39      	ldr	r3, [pc, #228]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f023 0203 	bic.w	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4936      	ldr	r1, [pc, #216]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c0c:	f7ff fa28 	bl	8001060 <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c14:	f7ff fa24 	bl	8001060 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e053      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 020c 	and.w	r2, r3, #12
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d1eb      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b27      	ldr	r3, [pc, #156]	@ (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d210      	bcs.n	8001c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b24      	ldr	r3, [pc, #144]	@ (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 0207 	bic.w	r2, r3, #7
 8001c52:	4922      	ldr	r1, [pc, #136]	@ (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b20      	ldr	r3, [pc, #128]	@ (8001cdc <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e032      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c78:	4b19      	ldr	r3, [pc, #100]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4916      	ldr	r1, [pc, #88]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d009      	beq.n	8001caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c96:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	490e      	ldr	r1, [pc, #56]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001caa:	f000 f821 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	490a      	ldr	r1, [pc, #40]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbc:	5ccb      	ldrb	r3, [r1, r3]
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	4a09      	ldr	r2, [pc, #36]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8001cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_RCC_ClockConfig+0x1d0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff f986 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40022000 	.word	0x40022000
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	080025fc 	.word	0x080025fc
 8001ce8:	20000024 	.word	0x20000024
 8001cec:	20000028 	.word	0x20000028

08001cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d002      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x30>
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d003      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x36>
 8001d1e:	e027      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d20:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d22:	613b      	str	r3, [r7, #16]
      break;
 8001d24:	e027      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	0c9b      	lsrs	r3, r3, #18
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	4a17      	ldr	r2, [pc, #92]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d30:	5cd3      	ldrb	r3, [r2, r3]
 8001d32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d010      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	0c5b      	lsrs	r3, r3, #17
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	4a11      	ldr	r2, [pc, #68]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d4a:	5cd3      	ldrb	r3, [r2, r3]
 8001d4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a0d      	ldr	r2, [pc, #52]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d52:	fb03 f202 	mul.w	r2, r3, r2
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	e004      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a0c      	ldr	r2, [pc, #48]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d64:	fb02 f303 	mul.w	r3, r2, r3
 8001d68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	613b      	str	r3, [r7, #16]
      break;
 8001d6e:	e002      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d72:	613b      	str	r3, [r7, #16]
      break;
 8001d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d76:	693b      	ldr	r3, [r7, #16]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	007a1200 	.word	0x007a1200
 8001d8c:	0800260c 	.word	0x0800260c
 8001d90:	0800261c 	.word	0x0800261c
 8001d94:	003d0900 	.word	0x003d0900

08001d98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001da0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <RCC_Delay+0x34>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <RCC_Delay+0x38>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0a5b      	lsrs	r3, r3, #9
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001db4:	bf00      	nop
  }
  while (Delay --);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1e5a      	subs	r2, r3, #1
 8001dba:	60fa      	str	r2, [r7, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f9      	bne.n	8001db4 <RCC_Delay+0x1c>
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	20000024 	.word	0x20000024
 8001dd0:	10624dd3 	.word	0x10624dd3

08001dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e041      	b.n	8001e6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d106      	bne.n	8001e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7fe ffea 	bl	8000dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	4610      	mov	r0, r2
 8001e14:	f000 fa56 	bl	80022c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d001      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e035      	b.n	8001ef8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a16      	ldr	r2, [pc, #88]	@ (8001f04 <HAL_TIM_Base_Start_IT+0x90>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d009      	beq.n	8001ec2 <HAL_TIM_Base_Start_IT+0x4e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb6:	d004      	beq.n	8001ec2 <HAL_TIM_Base_Start_IT+0x4e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a12      	ldr	r2, [pc, #72]	@ (8001f08 <HAL_TIM_Base_Start_IT+0x94>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d111      	bne.n	8001ee6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b06      	cmp	r3, #6
 8001ed2:	d010      	beq.n	8001ef6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee4:	e007      	b.n	8001ef6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0201 	orr.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40012c00 	.word	0x40012c00
 8001f08:	40000400 	.word	0x40000400

08001f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d020      	beq.n	8001f70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01b      	beq.n	8001f70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0202 	mvn.w	r2, #2
 8001f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f998 	bl	800228c <HAL_TIM_IC_CaptureCallback>
 8001f5c:	e005      	b.n	8001f6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f98b 	bl	800227a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f99a 	bl	800229e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d020      	beq.n	8001fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01b      	beq.n	8001fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0204 	mvn.w	r2, #4
 8001f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f972 	bl	800228c <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f965 	bl	800227a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f974 	bl	800229e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d020      	beq.n	8002008 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01b      	beq.n	8002008 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0208 	mvn.w	r2, #8
 8001fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2204      	movs	r2, #4
 8001fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f94c 	bl	800228c <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f93f 	bl	800227a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f94e 	bl	800229e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	d020      	beq.n	8002054 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01b      	beq.n	8002054 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0210 	mvn.w	r2, #16
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2208      	movs	r2, #8
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f926 	bl	800228c <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f919 	bl	800227a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f928 	bl	800229e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00c      	beq.n	8002078 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d007      	beq.n	8002078 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0201 	mvn.w	r2, #1
 8002070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe fd4a 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00c      	beq.n	800209c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fa6f 	bl	800257a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00c      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8f8 	bl	80022b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00c      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0220 	mvn.w	r2, #32
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fa42 	bl	8002568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_TIM_ConfigClockSource+0x1c>
 8002104:	2302      	movs	r3, #2
 8002106:	e0b4      	b.n	8002272 <HAL_TIM_ConfigClockSource+0x186>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800212e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002140:	d03e      	beq.n	80021c0 <HAL_TIM_ConfigClockSource+0xd4>
 8002142:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002146:	f200 8087 	bhi.w	8002258 <HAL_TIM_ConfigClockSource+0x16c>
 800214a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800214e:	f000 8086 	beq.w	800225e <HAL_TIM_ConfigClockSource+0x172>
 8002152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002156:	d87f      	bhi.n	8002258 <HAL_TIM_ConfigClockSource+0x16c>
 8002158:	2b70      	cmp	r3, #112	@ 0x70
 800215a:	d01a      	beq.n	8002192 <HAL_TIM_ConfigClockSource+0xa6>
 800215c:	2b70      	cmp	r3, #112	@ 0x70
 800215e:	d87b      	bhi.n	8002258 <HAL_TIM_ConfigClockSource+0x16c>
 8002160:	2b60      	cmp	r3, #96	@ 0x60
 8002162:	d050      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0x11a>
 8002164:	2b60      	cmp	r3, #96	@ 0x60
 8002166:	d877      	bhi.n	8002258 <HAL_TIM_ConfigClockSource+0x16c>
 8002168:	2b50      	cmp	r3, #80	@ 0x50
 800216a:	d03c      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0xfa>
 800216c:	2b50      	cmp	r3, #80	@ 0x50
 800216e:	d873      	bhi.n	8002258 <HAL_TIM_ConfigClockSource+0x16c>
 8002170:	2b40      	cmp	r3, #64	@ 0x40
 8002172:	d058      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x13a>
 8002174:	2b40      	cmp	r3, #64	@ 0x40
 8002176:	d86f      	bhi.n	8002258 <HAL_TIM_ConfigClockSource+0x16c>
 8002178:	2b30      	cmp	r3, #48	@ 0x30
 800217a:	d064      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x15a>
 800217c:	2b30      	cmp	r3, #48	@ 0x30
 800217e:	d86b      	bhi.n	8002258 <HAL_TIM_ConfigClockSource+0x16c>
 8002180:	2b20      	cmp	r3, #32
 8002182:	d060      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x15a>
 8002184:	2b20      	cmp	r3, #32
 8002186:	d867      	bhi.n	8002258 <HAL_TIM_ConfigClockSource+0x16c>
 8002188:	2b00      	cmp	r3, #0
 800218a:	d05c      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x15a>
 800218c:	2b10      	cmp	r3, #16
 800218e:	d05a      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x15a>
 8002190:	e062      	b.n	8002258 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021a2:	f000 f96a 	bl	800247a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80021b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	609a      	str	r2, [r3, #8]
      break;
 80021be:	e04f      	b.n	8002260 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021d0:	f000 f953 	bl	800247a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021e2:	609a      	str	r2, [r3, #8]
      break;
 80021e4:	e03c      	b.n	8002260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021f2:	461a      	mov	r2, r3
 80021f4:	f000 f8ca 	bl	800238c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2150      	movs	r1, #80	@ 0x50
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f921 	bl	8002446 <TIM_ITRx_SetConfig>
      break;
 8002204:	e02c      	b.n	8002260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002212:	461a      	mov	r2, r3
 8002214:	f000 f8e8 	bl	80023e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2160      	movs	r1, #96	@ 0x60
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f911 	bl	8002446 <TIM_ITRx_SetConfig>
      break;
 8002224:	e01c      	b.n	8002260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002232:	461a      	mov	r2, r3
 8002234:	f000 f8aa 	bl	800238c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2140      	movs	r1, #64	@ 0x40
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f901 	bl	8002446 <TIM_ITRx_SetConfig>
      break;
 8002244:	e00c      	b.n	8002260 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	4610      	mov	r0, r2
 8002252:	f000 f8f8 	bl	8002446 <TIM_ITRx_SetConfig>
      break;
 8002256:	e003      	b.n	8002260 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
      break;
 800225c:	e000      	b.n	8002260 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800225e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
	...

080022c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002384 <TIM_Base_SetConfig+0xc0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d007      	beq.n	80022ec <TIM_Base_SetConfig+0x28>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e2:	d003      	beq.n	80022ec <TIM_Base_SetConfig+0x28>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a28      	ldr	r2, [pc, #160]	@ (8002388 <TIM_Base_SetConfig+0xc4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d108      	bne.n	80022fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a20      	ldr	r2, [pc, #128]	@ (8002384 <TIM_Base_SetConfig+0xc0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <TIM_Base_SetConfig+0x52>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800230c:	d003      	beq.n	8002316 <TIM_Base_SetConfig+0x52>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a1d      	ldr	r2, [pc, #116]	@ (8002388 <TIM_Base_SetConfig+0xc4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d108      	bne.n	8002328 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800231c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a0d      	ldr	r2, [pc, #52]	@ (8002384 <TIM_Base_SetConfig+0xc0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d103      	bne.n	800235c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f023 0201 	bic.w	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	611a      	str	r2, [r3, #16]
  }
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	40012c00 	.word	0x40012c00
 8002388:	40000400 	.word	0x40000400

0800238c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f023 0201 	bic.w	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f023 030a 	bic.w	r3, r3, #10
 80023c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	621a      	str	r2, [r3, #32]
}
 80023de:	bf00      	nop
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	f023 0210 	bic.w	r2, r3, #16
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	031b      	lsls	r3, r3, #12
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002424:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	621a      	str	r2, [r3, #32]
}
 800243c:	bf00      	nop
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800245c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	f043 0307 	orr.w	r3, r3, #7
 8002468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	609a      	str	r2, [r3, #8]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800247a:	b480      	push	{r7}
 800247c:	b087      	sub	sp, #28
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002494:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	021a      	lsls	r2, r3, #8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	431a      	orrs	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	609a      	str	r2, [r3, #8]
}
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e041      	b.n	8002554 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a14      	ldr	r2, [pc, #80]	@ (8002560 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d009      	beq.n	8002528 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800251c:	d004      	beq.n	8002528 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a10      	ldr	r2, [pc, #64]	@ (8002564 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d10c      	bne.n	8002542 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800252e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	4313      	orrs	r3, r2
 8002538:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40012c00 	.word	0x40012c00
 8002564:	40000400 	.word	0x40000400

08002568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <memset>:
 800258c:	4603      	mov	r3, r0
 800258e:	4402      	add	r2, r0
 8002590:	4293      	cmp	r3, r2
 8002592:	d100      	bne.n	8002596 <memset+0xa>
 8002594:	4770      	bx	lr
 8002596:	f803 1b01 	strb.w	r1, [r3], #1
 800259a:	e7f9      	b.n	8002590 <memset+0x4>

0800259c <__libc_init_array>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	2600      	movs	r6, #0
 80025a0:	4d0c      	ldr	r5, [pc, #48]	@ (80025d4 <__libc_init_array+0x38>)
 80025a2:	4c0d      	ldr	r4, [pc, #52]	@ (80025d8 <__libc_init_array+0x3c>)
 80025a4:	1b64      	subs	r4, r4, r5
 80025a6:	10a4      	asrs	r4, r4, #2
 80025a8:	42a6      	cmp	r6, r4
 80025aa:	d109      	bne.n	80025c0 <__libc_init_array+0x24>
 80025ac:	f000 f81a 	bl	80025e4 <_init>
 80025b0:	2600      	movs	r6, #0
 80025b2:	4d0a      	ldr	r5, [pc, #40]	@ (80025dc <__libc_init_array+0x40>)
 80025b4:	4c0a      	ldr	r4, [pc, #40]	@ (80025e0 <__libc_init_array+0x44>)
 80025b6:	1b64      	subs	r4, r4, r5
 80025b8:	10a4      	asrs	r4, r4, #2
 80025ba:	42a6      	cmp	r6, r4
 80025bc:	d105      	bne.n	80025ca <__libc_init_array+0x2e>
 80025be:	bd70      	pop	{r4, r5, r6, pc}
 80025c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025c4:	4798      	blx	r3
 80025c6:	3601      	adds	r6, #1
 80025c8:	e7ee      	b.n	80025a8 <__libc_init_array+0xc>
 80025ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ce:	4798      	blx	r3
 80025d0:	3601      	adds	r6, #1
 80025d2:	e7f2      	b.n	80025ba <__libc_init_array+0x1e>
 80025d4:	08002620 	.word	0x08002620
 80025d8:	08002620 	.word	0x08002620
 80025dc:	08002620 	.word	0x08002620
 80025e0:	08002624 	.word	0x08002624

080025e4 <_init>:
 80025e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e6:	bf00      	nop
 80025e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ea:	bc08      	pop	{r3}
 80025ec:	469e      	mov	lr, r3
 80025ee:	4770      	bx	lr

080025f0 <_fini>:
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f2:	bf00      	nop
 80025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f6:	bc08      	pop	{r3}
 80025f8:	469e      	mov	lr, r3
 80025fa:	4770      	bx	lr
